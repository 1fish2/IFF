{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff8\deff0\stshfdbch0\stshfloch8\stshfhich8\stshfbi0\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f5\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier{\*\falt Courier New};}{\f8\fbidi \froman\fcharset0\fprq2{\*\panose 02040503060506020304}New York{\*\falt Times New Roman};}
{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f40\fbidi \fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Geneva{\*\falt Arial};}{\f51\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times;}
{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f240\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\f241\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\f243\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f244\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f245\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f246\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f247\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f248\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f580\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}
{\f581\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}{\f583\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}{\f584\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f587\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}
{\f588\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}{\f750\fbidi \froman\fcharset238\fprq2 Times CE;}{\f751\fbidi \froman\fcharset204\fprq2 Times Cyr;}{\f753\fbidi \froman\fcharset161\fprq2 Times Greek;}
{\f754\fbidi \froman\fcharset162\fprq2 Times Tur;}{\f755\fbidi \froman\fcharset177\fprq2 Times (Hebrew);}{\f756\fbidi \froman\fcharset178\fprq2 Times (Arabic);}{\f757\fbidi \froman\fcharset186\fprq2 Times Baltic;}
{\f758\fbidi \froman\fcharset163\fprq2 Times (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}
{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \f8 }{\*\defpap 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 
\f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \f8\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused \sqformat Normal Table;}{
\s34\ql \li0\ri0\widctlpar\tqc\tx3\tqr\tx6\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext34 \spriority0 footer;}}
{\*\rsidtbl \rsid924586\rsid6629897\rsid16078454}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\title ILBM}{\subject IFF Interleaved Bitmap}{\author Jerry Morrison}
{\operator Jerry Morrison}{\creatim\yr2013\mo11\dy5\hr14\min48}{\revtim\yr2013\mo11\dy5\hr14\min48}{\version2}{\edmins1}{\nofpages10}{\nofwords4111}{\nofchars20232}{\nofcharsws24295}{\vern32773}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/wo
rd/2003/wordml}}\paperw12240\paperh15840\margl1440\margr720\margt720\margb720\gutter0\ltrsect 
\ftnbj\aenddoc\linestart65536\hyphhotz0\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1
\makebackup\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0\jexpand\viewkind1\viewscale100\bdrrlswsix\nolnhtadjtbl\nojkernpunct\rsidroot6629897 \fet0
{\*\wgrffmtfilter 2450}\ilfomacatclnup0\stylesortmethod0{\*\ftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 
\f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 \ltrch\fcs0 \insrsid16078454 \chftnsep 
\par }}{\*\ftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 
\ltrch\fcs0 \insrsid16078454 \chftnsepc 
\par }}{\*\aftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 
\ltrch\fcs0 \insrsid16078454 \chftnsep 
\par }}{\*\aftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 
\ltrch\fcs0 \insrsid16078454 \chftnsepc 
\par }}\ltrpar \sectd \ltrsect\linex0\linestarts65536\endnhere\sectdefaultcl\sftnbj {\footerr \ltrpar \pard\plain \ltrpar\ql \li180\ri540\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin540\lin180\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 
\f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f4\fs20\insrsid16078454 \chpgn 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\qc \li180\ri580\nowidctlpar
\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af51\afs36 \ltrch\fcs0 
\f51\fs36\ul\insrsid16078454 "ILBM" IFF Interleaved Bitmap
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 Date:}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 \tab January 17, 1986 (CRNG data updated Oct, 1988 by Jerry Morrison)
\par \tab (Appendix E added and CAMG data updated Oct, 1988 by Commodore-Amiga, Inc.)
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 From:}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 \tab Jerry Morrison, Electronic Arts
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 Status:}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 \tab Released and in use
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 1. Introduction
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par "EA IFF 85" is Electronic Arts' standard for interchange format files. "ILBM" is a format for a 2 dimensional raster graphics image, specifically an }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 I}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454 nter}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 L}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 eaved bitplane }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 B}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid16078454 it}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 M}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
ap image with color map. An ILBM is an IFF "data section" or "FORM type", which can be an IFF file or a part of one.  ILBM allows simple, highly portable raster graphic storage.
\par 
\par An ILBM is an archival representation designed for three uses. First, a stand-alone image that specifies exactly how to display itself (resolution, si
ze, color map, etc.). Second, an image intended to be merged into a bigger picture which has its own depth, color map, and so on. And third, an empty image with a color map selection or "palette" for a paint program. ILBM is also intended as a building bl
ock for composite IFF FORMs like "animation sequences" and "structured graphics". Some uses of ILBM will be to preserve as much information as possible across disparate environments. Other uses will be to store data for a single program or highly cooperat
ive programs while maintaining subtle details. So we're trying to accomplish a lot with this one format.
\par 
\par This memo is the IFF supplement for FORM ILBM. Section 2 defines the purpose and format of property chunks bitmap header "BMHD", color map "CMAP", hotspot "GRAB", destination merge data "DEST", sprite information "SPRT", and Commodore Amiga viewport mode 
"CAMG". Section 3 defines the standard data chunk "BODY". These are the "standard" chunks. Section 4 defines the nonstandard data chunks. Additional spec
ialized chunks like texture pattern can be added later. The ILBM syntax is summarized in Appendix A as a regular expression and in Appendix B as a box diagram. Appendix C explains the optional run encoding scheme. Appendix D names the committee responsibl
e for this FORM ILBM standard.
\par 
\par Details of the raster layout are given in part 3, "Standard Data Chunk". Some elements are based on the Commodore Amiga hardware but generalized for use on other computers. An alternative to ILBM would be appropriate for comp
uters with true color data in each pixel, though the wealth of available ILBM images makes import and export important.
\par 
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 Reference:
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 "EA}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 IFF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 85"}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 Standard}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 for}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 Interchange}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 Format}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 Files}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 describes the underlying conventions for all IFF files.
\par Amiga}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\up6\insrsid16078454 \'ae}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  is a registered trademark of Commodore-Amiga, Inc.
\par Electronic Arts\'99 is a trademark of Electronic Arts.
\par Macintosh\'99 is a trademark licensed to Apple Computer, Inc.
\par MacPaint\'99 is a trademark of Apple Computer, Inc.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid16078454 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 2. Standard Properties
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par ILBM has several defined prop
erty chunks that act on the main data chunks. The required property "BMHD" and any optional properties must appear before any "BODY" chunk. (Since an ILBM has only one BODY chunk, any following properties would be superfluous.) Any of these properties may
 be shared over a LIST of several IBLMs by putting them in a PROP ILBM (See the EA IFF 85 document).
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 BMHD
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 The required property "BMHD" holds a BitMapHeader as defined in the following documentation. It describes the dimensions of the image, the encoding u
sed, and other data necessary to understand the BODY chunk to follow.
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx1080\tx4320\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 typedef UBYTE Masking; \tab 
/* Choice of masking technique. */
\par #define mskNone\tab 0
\par #define mskHasMask\tab 1
\par #define mskHasTransparentColor\tab 2
\par #define mskLasso\tab 3
\par 
\par typedef UBYTE Compression;\tab /* Choice of compression algorithm applied to the rows of all source and mask planes. "cmpByteRun1" is the byte run encoding described in Appendix C. Do not compress across rows! */
\par #define cmpNone\tab 0
\par #define cmpByteRun1\tab 1
\par 
\par typedef struct \{
\par }\pard \ltrpar\ql \fi-270\li1080\ri580\nowidctlpar\tx4410\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1080\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 UWORD w, h;\tab /* raster width & height in pixels */

\par WORD  x, y;\tab /* pixel position for this image */
\par UBYTE nPlanes;\tab /* # source bitplanes */
\par Masking     masking;
\par Compression compression;
\par UBYTE pad1;\tab /* unused; ignore on read, write as 0 */
\par UWORD transparentColor;\tab /* transparent "color number" (sort of) */
\par UBYTE xAspect, yAspect;\tab /* pixel aspect, a ratio width : height */
\par WORD  pageWidth, pageHeight;\tab /* source "page" size in pixels */
\par \} BitMapHeader;
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Fields are filed in the order shown. The UBYTE fields are byte-packed (the C compiler must not add pad bytes to the structure).
\par 
\par The fields }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 w}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 h}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 indicate the size of the image rectangle in pixels. Each row of the image is stored in an integral number of 16 bit words. The number of words per row is }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 words=((w+15)/16)}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid16078454  or }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 Ceiling(w/16)}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . The fields }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 x}{\rtlch\fcs1 
\af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 y}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 indicate the desired position of this image within the destination picture. Some reader programs may ignore }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 x}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  and }{\rtlch\fcs1 \af8 
\ltrch\fcs0 \f5\fs20\insrsid16078454 y}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . A safe default for writing an ILBM is (}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 x}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , }
{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 y}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 ) = (0, 0).
\par 
\par The number of source bitplanes in the BODY chunk is stored in }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 nPlanes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . An ILBM with a CMAP but no BODY and }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 nPlanes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  = 0 is the recommended way to store a color map.
\par 
\par Note: Color numbers are color map index values formed by pixels in the destination bitmap, which may be deeper than }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 nPlanes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 if a DEST chunk calls for merging the image into a deeper image.
\par 
\par The field }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 masking}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  indicates what kind of masking is to be used for this image. The value }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 mskNone}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  designates an opaque rectangular image. The value }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 mskHasMask}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454  means that a mask plane is interleaved with the bitplanes in the BODY chunk (see below). The value }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 mskHasTransparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454  indicates that pixels in the source planes matching }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 transparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 are to be considered "transparent". (Actually, }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 transparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 isn't a "color number" since it's matched with numbers formed by the source bitmap rather than the possibly deeper destination bitmap. Note that having a transparent color implies ignoring one of the color registers. The value }{\rtlch\fcs1 \af8 
\ltrch\fcs0 \f5\fs20\insrsid16078454 mskLasso}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  indicates the reader may construct a mask by lassoing the image as in MacPaint\'99. To do this, put a 1 pixel border of }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 transparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  around the image rectangle. Then do a seed fill from this border. Filled pixels are to be transparent.
\par 
\par Issue: Include in an appendix an algorithm for converting a transparent color to a mask plane, and maybe a lasso algorithm.
\par 
\par A code indicating the kind of data compression used is stored in }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 compression}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
. Beware that using data compression makes your data unreadable by programs that don't implement the matching decompression algorithm. So we'll employ as few compression encodings as possible. The run encoding }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 byteRun1}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  is documented in Appendix C.
\par 
\par The field }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 pad1}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  is a pad byte reserved for future use. It must be set to 0 for consistency.
\par 
\par The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 transparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  specifies which bit pattern means "transparent".  This only applies if }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 masking}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  is }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 mskHasTransparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  or }{\rtlch\fcs1 \af8 
\ltrch\fcs0 \f5\fs20\insrsid16078454 mskLasso}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . Otherwise, }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 transparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 should be 0.  (see above)
\par 
\par The pixel aspect ratio is stored as a ratio in the two fields }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 xAspect}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 yAspect}{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . This may be used by programs to compensate for different aspects or to help interpret the fields }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 w}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454 , }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 h}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 x}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454 , }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 y}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 pageWidth}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454 , and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 pageHeight}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , which are in units of pixels. The fraction }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 xAspect}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 /}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 yAspect}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 represents a pixel's width/height. It's recommended that your programs store proper fractions in the BitMapHeader, but aspect ratios can always be correctly compared with the test:
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 xAspect\bullet yDesiredAspect = yAspect\bullet xDesiredAspect

\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Typical values for aspect ratio are width : height = 10 : 11  for an Amiga 320 x 200 display and 1 : 1 for a Macintosh\'99 display.
\par 
\par The size in pixels of the source "page" (any raster device) is stored in }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 pageWidth}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  and }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 pageHeight}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
, e.g. (320, 200) for a low resolution Amiga display. This information might be used to scale an image or to automatically set the display format to suit the image. Note that the image can be larger than the page.
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 CMAP
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The optional (but encouraged) property "CMAP" stores color map data as triplets of red, green, and blue intensity values. The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 n}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 color map entries ("color registers") are stored in the order 0 through }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 n-1}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , totaling }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 3n}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  bytes. Thus }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 n}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  is the }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 ckSize/3}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . Normally, }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 n}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  would equal }{\rtlch\fcs1 \af8 
\ltrch\fcs0 \f5\fs20\insrsid16078454 2}{\rtlch\fcs1 \af8\afs18 \ltrch\fcs0 \f5\fs18\up6\insrsid16078454 nPlanes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 .
\par 
\par A CMAP chunk contains a }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 ColorMap}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 array as defined below.  Note that these typedefs assume a C compiler that implements packed arrays of 3-byte elements.
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx4770\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 typedef struct \{
\par \tab UBYTE red, green, blue;\tab /* color intensities 0..255 */
\par \tab \} ColorRegister;\tab /* size = 3 bytes */
\par 
\par typedef ColorRegister ColorMap[n];\tab /* size = 3n bytes */
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The color components red, green, and blue represent fractional intensity values in the range 0 through 255 256ths. White is (255, 255, 255) and black is (0, 0, 0). If your machine has less color resolution, use the }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid16078454 high}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 order}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 bits. Shift each field right on reading (or left on writing) and assign it to (from) a field in a local packed format like }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 Color4}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
, below. This achieves automatic conversion of images across environments with different color resolutions. On reading an ILBM, use defaults if the color map is absent or has fewer color registers than you need. Ignore any extra color registers.  (See App
endix E for a better way to write colors)
\par 
\par 
\par The example type }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 Color4}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  represents the format of a color register in working memory of an Amiga computer, which has 4 bit video DACs. (The "}
{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 :4}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 " tells smarter C compilers to pack the field into 4 bits.)
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx5400\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 typedef struct \{
\par \tab unsigned pad1 :4, red :4, green :4, blue :4;
\par \tab \} Color4;\tab /* Amiga RAM format. }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\ul\insrsid16078454 Not}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454  filed. */
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Remember that every chunk must be padded to an even length, so a color map with an odd number of entries would be followed by a 0 byte, not included in the }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454 .
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 GRAB
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The optional property "GRAB" locates a "handle" or "hotspot" of the image relative to its upper left corner, e.g. when used as a mouse cursor or a "paint brush". A GRAB chunk contains a Point2D.
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx3240\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 typedef struct \{
\par \tab WORD x, y;\tab /* relative coordinates (pixels) */
\par \tab \} Point2D;
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 DEST
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The optional property "DEST" is a way to say how to scatter zero or more source bitplanes into a deeper destination image. Some readers may ignore DEST.
\par 
\par The contents of a DEST chunk is DestMerge structure:
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx2970\tx9270\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 typedef struct \{
\par \tab UBYTE depth;\tab /* # bitplanes in the original source\tab */
\par \tab UBYTE pad1;\tab /* unused; for consistency put 0 here\tab */
\par \tab UWORD planePick;\tab /* how to scatter source bitplanes into destination\tab */
\par \tab UWORD planeOnOff;\tab /* default bitplane data for planePick\tab */
\par \tab UWORD planeMask;\tab /* selects which bitplanes to store into\tab */
\par \tab \} DestMerge;
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The low order }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 depth}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  number of bits in }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 planePick}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454 , }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 planeOnOff}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 planeMask}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454  correspond one-to-one with destination bitplanes. Bit 0 with bitplane 0, etc. (Any higher order bits should be ignored.) "1" bits in }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 planePick}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid16078454  mean "put the next source bitplane into this bitplane", so the number of "1" bits should equal }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 nPlanes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
. "0" bits mean "put the corresponding bit from }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 planeOnOff}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 into this bitplane". Bits in planeMask gate writing to the destination bitplane: "1" bits mean "write to this bitplane" while "0" bits mean "leave this bitplane alone". The normal case (with no DEST property) is equivalent to }{\rtlch\fcs1 \af8 
\ltrch\fcs0 \f5\fs20\insrsid16078454 planePick = planeMask = 2}{\rtlch\fcs1 \af8\afs18 \ltrch\fcs0 \f5\fs18\up6\insrsid16078454 nPlanes}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454  - 1}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 .

\par 
\par Remember that color numbers are formed by pixels in the destination bitmap (}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 depth}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  planes deep) not in the source bitmap (}{\rtlch\fcs1 \af8 
\ltrch\fcs0 \f5\fs20\insrsid16078454 nPlanes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  planes deep).
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 SPRT
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The presence of an "SPRT" chunk indicates that this image is intended as a sprite. It's up to the reader program to actually make it a sprite, if even possible, and to use or overrule the sprite precedence data inside the SPRT chunk:
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx3240\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 
typedef UWORD SpritePrecedence; /* relative precedence, 0 is the highest*/
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Precedence 0 is the highest, denoting a sprite that is foremost.
\par 
\par Creating a sprite may imply other setup. E.g. a 2 plane Amiga sprite would have }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 transparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 = 0. Color registers 1, 2, and 3 in the CMAP would be stored into the correct hardware color registers for the hardware sprite number used, while CMAP color register 0 would be ignored.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 CAMG
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par A "CAMG" chunk is specifically for the Commodore Amiga computer, readers on other computers may ignore CAMG. All Amiga-based reader and writer software should deal with CAMG. The Amiga supports many different video display modes including interlace, extra
 half-
bright, and hold & modify.  At this time a CAMG chunk contains a single long word (length=4).  The high 16 bits are currently reserved by Commodore; they must be written as zeros and ignored when read.  The low 16 bits of the CAMG will contain a ViewModes
 word.  This value can be used to determine the ViewModes information in effect when the ILBM was saved.  In the future CAMG may be extended to specify other information or video modes.
\par 
\par Some of the }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 ViewModes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  flags are not appropriate to use in a CAMG, these should be masked out when writing }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid16078454 or}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  reading.  Here are definitions for the bits to be removed:
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx3060\tx7740\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 #include <graphics/view.h>
\par 
\par #define BADFLAGS\tab (SPRITES|VP_HIDE|GENLOCK_AUDIO|GENLOCK_VIDEO)
\par #define FLAGMASK\tab (~BADFLAGS)
\par #define CAMGMASK\tab (FLAGMASK & 0000FFFFL)
\par \tab \'85
\par camg.ViewModes\tab = myScreen->ViewPort.Modes & CAMGMASK;\tab /* Writing */
\par NewScreen.ViewModes\tab = camg.ViewModes & CAMGMASK;\tab /* Reading */
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid16078454 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 
3. Standard "BODY" Data Chunk
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 Raster Layout
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Raster scan proceeds left-to-right (increasing X) across scan lines, then top-to-bottom (increasing Y) down columns of scan lines. The coordinate system is in units of pixels, where (0,0) is the upper left corner.
\par 
\par The raster is typically organized as bitplanes in memory. The corresponding bits from each plane, taken together, make up an index into the color map which gives a color value for that pixel. The first bitplane, plane 0, is the low order bit of these colo
r indexes.
\par 
\par A scan line is made of one "row" from each bitplane. A row is one planes\rquote  bits for one scan line, but 
padded out to a word (2 byte) boundary (not necessarily the first word boundary). Within each row, successive bytes are displayed in order and the most significant bit of each byte is displayed first.
\par 
\par A "mask" is an optional "plane" of data the same size (}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 w}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 h}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid16078454 
) as a bitplane.  It tells how to "cut out" part of the image when painting it onto another image. "One" bits in the mask mean "copy the corresponding pixel to the destination". "Zero" mask bits mean "leave this destination pixel alone". In other word
s, "zero" bits designate transparent pixels.
\par 
\par The rows of the different bitplanes and mask are }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 interleaved}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 in the file (see below). This localizes all the information pertinent to each scan line. It makes it much easier to transform the data while reading it to adjust the image size or depth. It also makes it possible to scroll a big image by swapping rows di
rectly from the file without the need for random-access to all the bitplanes.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 BODY
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The source raster  is stored in a "BODY" chunk. This one chunk holds all bitplanes and the optional mask, interleaved by row.
\par 
\par The BitMapHeader, in a BMHD property chunk, specifies the raster's dimensions }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 w}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 h}{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 nPlanes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . It also holds the }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 masking}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  field which indicates if there is a mask plane and the }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 compression}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454 
 field which indicates the compression algorithm used. This information is needed to interpret the BODY chunk, so the BMHD chunk must appear first. While reading an ILBM's BODY, a program may convert the image to another size by filling (with }{
\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 transparentColor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 ) or clipping.
\par 
\par The BODY's content is a concatenation of scan lines. Each scan line is a concatenation of one row of data from each plane in order 0 through }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 nPlanes-1}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454  followed by one row from the mask (if }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 masking = hasMask}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  ). If the BitMapHeader field }{\rtlch\fcs1 \af8 
\ltrch\fcs0 \f5\fs20\insrsid16078454 compression}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  is }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 cmpNone}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 , all }{\rtlch\fcs1 
\af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 h}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  rows are exactly }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 (w+15)/16}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 words wide. Otherwise, every row is compressed according to the specified algorithm and the stored widths depend on the data compression.
\par 
\par Reader programs that require fewer bitplanes than appear in a particular ILBM file can combine planes or drop the high-order (later) planes. Similarly, they may add bitplanes and/or discard the mask plane.
\par 
\par Do }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 not}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 compress across rows, and don't forget to compress the mask just like the bitplanes. Remember to pad any BODY chunk that contains an odd number of bytes and skip the pad when reading.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid16078454 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 4. Nonstandard Data Chunks
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The following data chunks were defined after various programs began using FORM ILBM so they are "nonstandard" chunks.  See the registry document for the latest information on additional nonstandard chunks.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 CRNG
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par A "CRNG" chunk contains "color register range" information. It's used by Electronic Arts' Deluxe Paint program to identify a contiguous range of color registers for a "shade range" and color cycling. There can be zero or more CRNG chunks in an ILBM, but a
ll should appear before the BODY chunk. Deluxe Paint normally writes 4 CRNG chunks in an ILBM when the user asks it to "Save Picture".
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx3240\tx9180\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 typedef struct \{
\par \tab WORD  pad1;\tab /* reserved for future use; store 0 here\tab */
\par \tab WORD  rate;\tab /* color cycle rate\tab */
\par \tab WORD  flags;\tab /* see below\tab */
\par \tab UBYTE low, high;\tab /* lower and upper color registers selected\tab */
\par \tab \} CRange;
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The bits of the }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 flags}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 word are interpreted as follows: if the low bit is set then the cycle is "active", and if this bit is clear it is not active.  Normally, color cycling is done so that colors move to the next higher position in the cycle, with the color in the high slot m
oving around to the low slot.  If the second bit of the flags word is set, the cycle moves in the opposite direction.  As usual, the other bits of the flags word are reserved for future expansion. Here are the masks to test these bits:
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx3240\tx9180\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 #define RNG_ACTIVE  1
\par #define RNG_REVERSE 2
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The fields }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 low}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 high}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 indicate the range of color registers (color numbers) selected by this CRange.
\par 
\par The field }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 active}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  indicates whether color cycling is on or off. Zero means off.
\par 
\par The field }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 rate}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  determines the speed at which the colors will step when color cycling is on. The units are such that a rate 
of 60 steps per second is represented as 2}{\rtlch\fcs1 \af51\afs18 \ltrch\fcs0 \f51\fs18\up6\insrsid16078454 14}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 = 16384. Slower rates can be obtained by linear scaling: for 30 steps/second, rate = 8192; for 1 step/second, rate = 16384/60 \u8776\'98 273.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 CCRT
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Commodore's Graphicraft program uses a similar chunk "CCRT" (for Color Cycling Range and Timing). This chunk contains a CycleInfo structure.
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx3240\tx9180\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 typedef struct \{
\par \tab WORD  direction;\tab /* 0 = don't cycle. 1 = cycle forwards (1, 2, 3).
\par \tab \tab  * -1 = cycle backwards (3, 2, 1)\tab */
\par \tab UBYTE start, end;\tab /* lower and upper color registers selected\tab */
\par \tab LONG  seconds;\tab /* # seconds between changing colors plus...\tab */
\par \tab LONG  microseconds;\tab /* # microseconds between changing colors\tab */
\par \tab WORD  pad;\tab /* reserved for future use; store 0 here\tab */
\par \tab \} CycleInfo;
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par This is very similar to a CRNG chunk. A program would probably only use one of these two methods of expressing color cycle data, new programs should use CRNG. You could write out both if you want to communicate this information to both Deluxe Paint and Gr
aphicraft.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid16078454 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 Appendix A. ILBM Regular Expression
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Here's a regular expression summary of the FORM ILBM syntax. This could be an IFF file or a part of one.
\par 
\par }\pard \ltrpar\ql \fi-2340\li2520\ri580\nowidctlpar\tx4680\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin2520\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 ILBM ::= "FORM" #\{\tab 
"ILBM" BMHD [CMAP] [GRAB] [DEST] [SPRT] [CAMG]
\par \tab CRNG* CCRT* [BODY]\tab \}
\par 
\par BMHD ::= "BMHD" #\{\tab BitMapHeader\tab \}
\par CMAP ::= "CMAP" #\{\tab (red green blue)*\tab \} [0]
\par GRAB ::= "GRAB" #\{\tab Point2D\tab \}
\par DEST ::= "DEST" #\{\tab DestMerge\tab \}
\par SPRT ::= "SPRT" #\{\tab SpritePrecedence\tab \}
\par CAMG ::= "CAMG" #\{\tab LONG\tab \}
\par 
\par CRNG ::= "CRNG" #\{\tab CRange\tab \}
\par CCRT ::= "CCRT" #\{\tab CycleInfo\tab \}
\par BODY ::= "BODY" #\{\tab UBYTE*\tab \} [0]
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The token "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 #}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 " represents a }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid16078454  LONG count of the following \{braced\} data bytes. E.g. a BMHD's "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 #}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 " should equal }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid16078454 sizeof(BitMapHeader)}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 . Literal strings are shown in "quotes", [square bracket items] are optional, and "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 *}{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 " means 0 or more repetitions. A sometimes-needed pad byte is shown as "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 [0]}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 ".
\par 
\par The property chunks BMHD, CMAP, GRAB, DEST, SPRT, CAMG and any CRNG and CCRT data chunks may actually be in any order but all must appear before the BODY chunk since ILBM readers usually stop as soon as they read the BODY. If any of the 6 
property chunks are missing, default values are inherited from any shared properties (if the ILBM appears inside an IFF LIST with PROPs) or from the reader program's defaults. If any property appears more than once, the last occurrence before the BODY is 
the one that counts since that's the one that modifies the BODY.
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 
\par 
\par 
\par Appendix B. ILBM Box Diagram
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Here's a box diagram for a simple example: an uncompressed image 320 x 200 pixels x 3 bitplanes. The text to the right of the diagram shows the outline that would be printed by the IFFCheck utility program for this particular file.
\par 
\par }\pard \ltrpar\ql \li1440\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1440\itap0\pararsid6629897 {\pard\plain \ltrpar
\ql \li1440\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1440\itap0\pararsid6629897 \rtlch\fcs1 \af51\afs20\alang1025 \ltrch\fcs0 \f51\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033\insrsid6629897 {\object\objemb
\objw7301\objh3480\objscalex98\objscaley96{\*\objclass Word.Picture.8}{\*\objdata 01050000020000000f000000576f72642e506963747572652e3800000000000000000000140000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff08000000feffffff04000000050000000600000007000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff020000000709020000000000c0000000000000460000000000000000000000001056
b31779dace01030000000009000000000000030050004900430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
000000000000000000000000640000000000000003004d004500540041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0002010100000003000000ffffffff0000000000000000000000000000000000000000000000000000
0000000000000000000002000000d603000000000000030050004900430054000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000201ffffffff04000000ffffffff000000000000000000000000000000000000000000000000
00000000000000000000000012000000020400000000000001000000feffffff030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f0000001000000011000000feffffff130000001400000015000000160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff640002000100000000000800b9250000fc110000841c0000980d000000000000000000000000000000000000d5030000c103000000000000000000000000000000000000000000ff00000000000000ff00000000000000ff000000000000
00ff00000000000000000000000000000000000000000000000000000000000000000800b925fc110000010009000003e701000007001c0000000000050000000b0207000700050000000c02ae006d010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102
ffffff00030000001e0007000000fc020000000000000000040000002d01000008000000fa0205000100000000000000040000002d0101000b0000001a085700fcff57004c00bc002e00a8001a000b0000001a0877004c007700fcff26002e0012001a0008000000fa0206000100000000000000040000002d0102000500
0000140224002300050000001302aa0023001c000000fb02f6ff00000000000090010000000000000030436f757269657200701c0abf10c5f709ccdd3600d894487680014c76f91e66b6040000002d0103000c00000021050c002e424f445920203234303030970007010b000000210509002e434d4150202032314d6400
07010b000000210509002e424d4844202032304d3a0007010f00000021051100464f524d202032343037302020494c424d001600070107000000210501003001880035000b00000021050900302c20302c203020854da9003b0008000000fa0206000200000000000000040000002d0104000500000014029d0034000500
000013029d00ee00090000002105050032343030302097009200090000002105060091424f44599297003b0007000000fc020100000000000000040000002d010500070000001b04b000ef008a0033001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c203020850076003b0005000000
14026a0034000500000013026a00ee000700000021050200323164009200090000002105060091434d41509264003b00070000001b047d00ef00570033001400000021051c003332302c203230302c20302c20302c20332c20302c20302c203020854c003b00050000001402400034000500000013024000ee0007000000
2105020032303a009200090000002105060091424d4844923a003b00070000001b045300ef002d003300090000002105060091494c424d92280035000500000014021c002e000500000013021c00f400090000002105050032343037309216009200090000002105060091464f524d921600350007000000fc020000ffff
ff000000040000002d010600040000002d01010004000000f00104000e000000240305000a005e002d005e002d006a000a006a000a005e00090000002105050032343037309267000b00040000002d01050008000000fa0206000200000000000000040000002d010400070000001b04b300f50009002d00040000002701
ffff03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004020007000700b501741101a00082a000ac01000a0007000700b501746100a8001a00bc002effe80030610012001a0026002e009c0030200024002300aa0023a000ada10096000605000000
02bca1009a0008fffd000000260000a000980300160d000a28009701070c2e424f445920203234303030a00099a00097a1009600060500000002bca1009a0008fffd0000001f0000a000982800640107092e434d415020203231a00099a00097a1009600060500000002bca1009a0008fffd0000001d0000a0009828003a
0107092e424d484420203230a00099a00097a1009600060500000002bca1009a0008fffd000000350000a00098280016010711464f524d202032343037302020494c424da00099a00097a1009600060500000002bca1009a0008fffd000000060000a0009828008800350130a00099a00097a1009600060500000002bca1
009a0008fffd0000001d0000a000982b062109302c20302c203020c9a00099a00097070002000220009c0033009c00eda1009600060500000002bca1009a0008fffd000000110000a000982800970092053234303030a00099a00097a1009600060500000002bca1009a0008fffd000000140000a00098280097003b06d4
424f4459d5a00099a0009730008a003300b000efa1009600060500000002bca1009a0008fffd000000590000a00098280076003b1d302c20302c20303b2033322c20302c20303b2036342c20302c203020c9a00099a000972000690033006900eda1009600060500000002bca1009a0008fffd000000080000a000982800
640092023231a00099a00097a1009600060500000002bca1009a0008fffd000000140000a00098280064003b06d4434d4150d5a00099a000973000570033007d00efa1009600060500000002bca1009a0008fffd000000560000a0009828004c003b1c3332302c203230302c20302c20302c20332c20302c20302c203020
c9a00099a0009720003f0033003f00eda1009600060500000002bca1009a0008fffd000000080000a0009828003a0092023230a00099a00097a1009600060500000002bca1009a0008fffd000000140000a0009828003a003b06d4424d4844d5a00099a0009730002d0033005300efa1009600060500000002bca1009a00
08fffd000000140000a00098280028003506d4494c424dd5a00099a0009720001b002d001b00f3a1009600060500000002bca1009a0008fffd000000110000a000982800160092053234303730a00099a00097a1009600060500000002bca1009a0008fffd000000140000a00098280016003506d4464f524dd5a00099a0
0097a1009600060500000002bc32005e000a006a002da1009a0008fffd000000110000a00098280067000b053234303730a00099a00097300009002d00b300f5a00083ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000200030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003004f0062006a0049006e0066006f000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000012000200ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000023000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000050000000d0000004d45544146494c455049435400b925000004eeffffd60300000800b925fc110000
010009000003e701000007001c0000000000050000000b0207000700050000000c02ae006d010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e0007000000fc020000000000000000040000002d01000008000000fa0205000100
000000000000040000002d0101000b0000001a085700fcff57004c00bc002e00a8001a000b0000001a0877004c007700fcff26002e0012001a0008000000fa0206000100000000000000040000002d01020005000000140224002300050000001302aa0023001c000000fb02f6ff00000000000090010000000000000030
436f757269657200701c0abf10c5f709ccdd3600d894487680014c76f91e66b6040000002d0103000c00000021050c002e424f445920203234303030970007010b000000210509002e434d4150202032314d640007010b000000210509002e424d4844202032304d3a0007010f00000021051100464f524d202032343037
302020494c424d001600070107000000210501003001880035000b00000021050900302c20302c203020854da9003b0008000000fa0206000200000000000000040000002d0104000500000014029d0034000500000013029d00ee00090000002105050032343030302097009200090000002105060091424f4459929700
3b0007000000fc020100000000000000040000002d010500070000001b04b000ef008a0033001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c203020850076003b000500000014026a0034000500000013026a00ee000700000021050200323164009200090000002105060091434d41
509264003b00070000001b047d00ef00570033001400000021051c003332302c203230302c20302c20302c20332c20302c20302c203020854c003b00050000001402400034000500000013024000ee00070000002105020032303a009200090000002105060091424d4844923a003b00070000001b045300ef002d003300
090000002105060091494c424d92280035000500000014021c002e000500000013021c00f400090000002105050032343037309216009200090000002105060091464f524d921600350007000000fc020000ffffff000000040000002d010600040000002d01010004000000f00104000e000000240305000a005e002d00
5e002d006a000a006a000a005e00090000002105050032343037309267000b00040000002d01050008000000fa0206000200000000000000040000002d010400070000001b04b300f50009002d00040000002701ffff030000000000}{\result {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid6629897 
{\pict\wmetafile8\picw9657\pich4604\picwgoal7300\pichgoal3480 \picscalex98\picscaley96 
010009000003e701000007001c0000000000050000000b0207000700050000000c02ae006d010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e0007000000fc020000000000000000040000002d01000008000000fa020500010000
0000000000040000002d0101000b0000001a085700fcff57004c00bc002e00a8001a000b0000001a0877004c007700fcff26002e0012001a0008000000fa0206000100000000000000040000002d01020005000000140224002300050000001302aa0023001c000000fb02f6ff00000000000090010000000000000030436f
757269657200701c0abf10c5f709ccdd3600d894487680014c76f91e66b6040000002d0103000c00000021050c002e424f445920203234303030970007010b000000210509002e434d4150202032314d640007010b000000210509002e424d4844202032304d3a0007010f00000021051100464f524d202032343037302020
494c424d001600070107000000210501003001880035000b00000021050900302c20302c203020854da9003b0008000000fa0206000200000000000000040000002d0104000500000014029d0034000500000013029d00ee00090000002105050032343030302097009200090000002105060091424f44599297003b000700
0000fc020100000000000000040000002d010500070000001b04b000ef008a0033001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c203020850076003b000500000014026a0034000500000013026a00ee000700000021050200323164009200090000002105060091434d41509264003b
00070000001b047d00ef00570033001400000021051c003332302c203230302c20302c20302c20332c20302c20302c203020854c003b00050000001402400034000500000013024000ee00070000002105020032303a009200090000002105060091424d4844923a003b00070000001b045300ef002d003300090000002105
060091494c424d92280035000500000014021c002e000500000013021c00f400090000002105050032343037309216009200090000002105060091464f524d921600350007000000fc020000ffffff000000040000002d010600040000002d01010004000000f00104000e000000240305000a005e002d005e002d006a000a
006a000a005e00090000002105050032343037309267000b00040000002d01050008000000fa0206000200000000000000040000002d010400070000001b04b300f50009002d00040000002701ffff030000000000}}}}}\sectd \ltrsect\linex0\linestarts65536\endnhere\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid16078454 
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 0}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 " after the CMAP chunk is a pad byte.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid16078454 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 Appendix C. ByteRun1 Run Encoding
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The run encoding scheme }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 byteRun1}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454  is best described by pseudo code for the decoder Unpacker (called UnPackBits in the Macintosh\'99 toolbox):

\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx1080\tx1440\tx2790\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid16078454 UnPacker:
\par \tab LOOP until produced the desired number of bytes
\par \tab \tab Read the next source byte into n
\par \tab \tab SELECT n FROM
\par \tab \tab \tab [0..127]\tab => copy the next n+1 bytes literally
\par \tab \tab \tab [-1..-127]\tab => replicate the next byte -n+1 times
\par \tab \tab \tab -128\tab => no operation
\par \tab \tab \tab ENDCASE;
\par \tab \tab ENDLOOP;
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par In the inverse routine Packer, it's best to encode a 2 byte repeat run as a replicate run }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 except}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
 when preceded and followed by a literal run, in which case it's best to merge the three into one literal run. Always encode 3 byte repeats as replicate runs.
\par 
\par Remember that each row of each scan line of a raster is separately packed.
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 
\par 
\par 
\par Appendix D. Standards Committee
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par The following people contributed to the design of this FORM ILBM standard:
\par 
\par }\pard \ltrpar\ql \li540\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin540\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 Bob "Kodiak" Burns, Commodore-Amiga
\par R. J. Mical, Commodore-Amiga
\par Jerry Morrison, Electronic Arts
\par Greg Riker, Electronic Arts
\par Steve Shaw, Electronic Arts
\par Dan Silva, Electronic Arts
\par Barry Walsh, Commodore-Amiga
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid16078454 
\par 
\par 
\par Appendix E. IFF Hints
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par Hints on ILBM files from Jerry Morrison, Oct 1988.  How to avoid some pitfalls when reading ILBM files:
\par 
\par }\pard \ltrpar\ql \fi-180\li810\ri400\nowidctlpar\tx7380\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin400\lin810\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 \bullet \tab 
Don't ignore the BitMapHeader.masking field. A bitmap with a mask (such as a partially-transparent DPaint brush or a DPaint picture with a stencil) will read as garbage if you don't de-interleave the mask.
\par \bullet \tab Don't assume all images are compressed. Narrow images aren't usually run-compressed since that would actually make them longer.
\par \bullet \tab Don't assume a particular image size. You may encounter overscan pictures and PAL pictures.
\par }\pard \ltrpar\ql \li360\ri400\nowidctlpar\tx7380\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin400\lin360\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par There's a better way to read a BODY than the example IFF code. The GetBODY routine should call a GetScanline routine once per scan line, which calls a GetRow routine for each bitplane in the file. This in turn calls a GetUnpackedBytes routine, which calls
 a GetBytes routine as needed and unpacks the result. (If the picture is uncompressed, GetRow calls GetBytes directly.) Since the unpacker knows how many packed bytes to read, this avoids juggling buffers for a memory-to-memory UnPackBytes routine.
\par 
\par Caution: If you make many AmigaDOS calls to read or write a few bytes at a time, performance will be mud! AmigaDOS has a high overhead per call, even with RAM disk. So use buffered read/write routines.
\par 
\par 
\par Different hardware display devices have different color resolutions:
\par 
\par }\pard \ltrpar\ql \li1080\ri400\nowidctlpar\tx2520\tqdec\tx4860\tx6480\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin400\lin1080\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid16078454 Device\tab R:G:B bits\tab maxColor

\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 Mac SE\tab 1\tab 1
\par IBM EGA\tab 2:2:2\tab 3
\par Atari ST\tab 3:3:3\tab 7
\par Amiga\tab 4:4:4\tab 15
\par CD-I\tab 5:5:5\tab 31
\par IBM VGA\tab 6:6:6\tab 63
\par Mac II\tab 8:8:8\tab 255
\par }\pard \ltrpar\ql \li360\ri400\nowidctlpar\tx7380\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin400\lin360\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \i\f51\fs20\insrsid16078454 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
An ILBM CMAP defines 8 bits of Red, Green and Blue (ie. 8:8:8 bits of R:G:B). When displaying on hardware which has less color resolution, just take the high order bits.  For example, to convert ILBM's 8-bit Red to the Amiga's 4-bit Red, right shift the d
ata by 4 bits  (R4 := R8 >> 4).
\par 
\par To convert hardware colors to ILBM colors, the ILBM specification says just set the high bits (R8 :
= R4 << 4). But you can transmit higher contrast to foreign display devices by scaling the data [0..maxColor] to the full range [0..255]. In other words, R8 := (Rn x 255) \'f7
 maxColor. (Example #1:  EGA color 1:2:3 scales to 85:170:255.  Example #2:  Amiga 
15:7:0 scales to 255:119:0) This makes a big difference where maxColor is less than 15. In the extreme case, Mac SE white (1) should be converted to ILBM white (255), not to ILBM gray (128).
\par 
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid16078454 CGA and EGA subtleties
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par IBM EGA colors in 350 scan line mode are 2:2:2 bits of R:G:B, stored in memory as xxR'G'B'RBG. That's 3 low-order bits followed by 3 high-order bits.
\par 
\par IBM CGA colors are 4 bits stored in a byte as xxxxIRGB. (EGA colors in 200 scan line modes are the same as CGA colors, but stored in memory as xxxIxRGB.) That's 3 high-order bits (one for each of R, G, and B) plus one low-order "Intensity" bit for all 3 c
omponents R, G, and B. Exception: IBM monitors show IRGB = 0110 as brown, which is really the EGA color R:G:B = 2:1:0, not dark yellow 2:2:0.
\par }\pard \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid6629897 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid16078454 
\par }{\*\themedata 504b030414000600080000002100828abc13fa0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb6ac3301045f785fe83d0b6d8
72ba28a5d8cea249777d2cd20f18e4b12d6a8f843409c9df77ecb850ba082d74231062ce997b55ae8fe3a00e1893f354e9555e6885647de3a8abf4fbee29bbd7
2a3150038327acf409935ed7d757e5ee14302999a654e99e393c18936c8f23a4dc072479697d1c81e51a3b13c07e4087e6b628ee8cf5c4489cf1c4d075f92a0b
44d7a07a83c82f308ac7b0a0f0fbf90c2480980b58abc733615aa2d210c2e02cb04430076a7ee833dfb6ce62e3ed7e14693e8317d8cd0433bf5c60f53fea2fe7
065bd80facb647e9e25c7fc421fd2ddb526b2e9373fed4bb902e182e97b7b461e6bfad3f010000ffff0300504b030414000600080000002100a5d6a7e7c00000
00360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4fc7060abb08
84a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b63095120f88d94fbc
52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462a1a82fe353
bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f7468656d652f7468
656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b4b0d592c9c
070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b4757e8d3f7
29e245eb2b260a0238fd010000ffff0300504b03041400060008000000210096b5ade296060000501b0000160000007468656d652f7468656d652f7468656d65
312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87615b8116d8
a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad79482a9c04
98f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b5d8a314d3c
94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab999fb7b471
7509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9699640f671
9e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd5868b37a088d1
e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d60cf03ac1a5
193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f9e7ef3f2d1
17d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be15c308d3f2
8acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a99793849c26ae6
6252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d32a423279a
668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2af074481847
bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86e877f0034e
16bafb0e258ebb4faf06b769e888340b103d3311da9750aa9d0a1cd3e4efca31a3508f6d0c5c5c398602f8e2ebc71591f5b616e24dd893aa3261fb44f95d843b
5974bb5c04f4edafb95b7892ec1108f3f98de75dc97d5772bdff7cc95d94cf672db4b3da0a6557f70db629362d72bcb0431e53c6066acac80d699a6409fb44d0
8741bdce9c0e4971624a2378cceaba830b05366b90e0ea23aaa241845368b0eb9e2612ca8c742851ca251ceccc70256d8d87265dd96361531f186c3d9058edf2
c00eafe8e1fc5c509031bb4d680e9f39a3154de0accc56ae644441edd76156d7429d995bdd88664a9dc3ad50197c38af1a0c16d684060441db02565e85f3b966
0d0713cc48a0ed6ef7dedc2dc60b17e92219e180643ed27acffba86e9c94c78ab90980d8a9f0913ee49d62b512b79626fb06dccee2a432bbc60276b9f7dec44b
7904cfbca4f3f6443ab2a49c9c2c41476dafd55c6e7ac8c769db1bc399161ee314bc2e75cf8759081743be1236ec4f4d6693e5336fb672c5dc24a8c33585b5fb
9cc24e1d4885545b58463634cc5416022cd19cacfccb4d30eb45296023fd35a458598360f8d7a4003bbaae25e331f155d9d9a5116d3bfb9a95523e51440ca2e0
088dd844ec6370bf0e55d027a012ae264c45d02f708fa6ad6da6dce29c255df9f6cae0ec38666984b372ab5334cf640b37795cc860de4ae2816e95b21be5ceaf
8a49f90b52a51cc6ff3355f47e0237052b81f6800fd7b802239daf6d8f0b1571a8426944fdbe80c6c1d40e8816b88b8569082ab84c36ff0539d4ff6dce591a26
ade1c0a7f669880485fd484582903d284b26fa4e2156cff62e4b9265844c4495c495a9157b440e091bea1ab8aaf7760f4510eaa69a6465c0e04ec69ffb9e65d0
28d44d4e39df9c1a52ecbd3607fee9cec7263328e5d661d3d0e4f62f44acd855ed7ab33cdf7bcb8ae889599bd5c8b3029895b6825696f6af29c239b75a5bb1e6
345e6ee6c28117e73586c1a2214ae1be07e93fb0ff51e133fb65426fa843be0fb515c187064d0cc206a2fa926d3c902e907670048d931db4c1a44959d366ad93
b65abe595f70a75bf03d616c2dd959fc7d4e6317cd99cbcec9c58b34766661c7d6766ca1a9c1b327531486c6f941c638c67cd22a7f75e2a37be0e82db8df9f30
254d30c1372581a1f51c983c80e4b71ccdd28dbf000000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f74
68656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f24
51eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198
720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528
a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100828abc13fa0000001c0200001300000000000000000000000000
000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b000000000000000000000000
002b0100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000140200007468
656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d001400060008000000210096b5ade296060000501b000016000000000000000000
00000000d10200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b010000270000000000
00000000000000009b0900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000960a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e352e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffffec69d9888b8b3d4c859eaf6cd158be0f00000000000000000000000050f2
b31779dace01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}