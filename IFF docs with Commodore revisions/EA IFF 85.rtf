{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff8\deff0\stshfdbch0\stshfloch8\stshfhich8\stshfbi0\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f4\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f5\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier{\*\falt Courier New};}{\f8\fbidi \froman\fcharset0\fprq2{\*\panose 02040503060506020304}New York{\*\falt Times New Roman};}
{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}{\f40\fbidi \fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Geneva{\*\falt Arial};}{\f51\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times;}
{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhimajor\f31502\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria;}{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f240\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\f241\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\f243\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f244\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f245\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f246\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f247\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f248\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f280\fbidi \fswiss\fcharset238\fprq2 Helvetica CE;}
{\f281\fbidi \fswiss\fcharset204\fprq2 Helvetica Cyr;}{\f283\fbidi \fswiss\fcharset161\fprq2 Helvetica Greek;}{\f284\fbidi \fswiss\fcharset162\fprq2 Helvetica Tur;}{\f285\fbidi \fswiss\fcharset177\fprq2 Helvetica (Hebrew);}
{\f286\fbidi \fswiss\fcharset178\fprq2 Helvetica (Arabic);}{\f287\fbidi \fswiss\fcharset186\fprq2 Helvetica Baltic;}{\f288\fbidi \fswiss\fcharset163\fprq2 Helvetica (Vietnamese);}{\f580\fbidi \froman\fcharset238\fprq2 Cambria Math CE;}
{\f581\fbidi \froman\fcharset204\fprq2 Cambria Math Cyr;}{\f583\fbidi \froman\fcharset161\fprq2 Cambria Math Greek;}{\f584\fbidi \froman\fcharset162\fprq2 Cambria Math Tur;}{\f587\fbidi \froman\fcharset186\fprq2 Cambria Math Baltic;}
{\f588\fbidi \froman\fcharset163\fprq2 Cambria Math (Vietnamese);}{\f750\fbidi \froman\fcharset238\fprq2 Times CE;}{\f751\fbidi \froman\fcharset204\fprq2 Times Cyr;}{\f753\fbidi \froman\fcharset161\fprq2 Times Greek;}
{\f754\fbidi \froman\fcharset162\fprq2 Times Tur;}{\f755\fbidi \froman\fcharset177\fprq2 Times (Hebrew);}{\f756\fbidi \froman\fcharset178\fprq2 Times (Arabic);}{\f757\fbidi \froman\fcharset186\fprq2 Times Baltic;}
{\f758\fbidi \froman\fcharset163\fprq2 Times (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \froman\fcharset238\fprq2 Cambria CE;}
{\fhimajor\f31529\fbidi \froman\fcharset204\fprq2 Cambria Cyr;}{\fhimajor\f31531\fbidi \froman\fcharset161\fprq2 Cambria Greek;}{\fhimajor\f31532\fbidi \froman\fcharset162\fprq2 Cambria Tur;}
{\fhimajor\f31535\fbidi \froman\fcharset186\fprq2 Cambria Baltic;}{\fhimajor\f31536\fbidi \froman\fcharset163\fprq2 Cambria (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp \f8 }{\*\defpap 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 
\f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \f8\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused \sqformat Normal Table;}{
\s34\ql \li0\ri0\widctlpar\tqc\tx3\tqr\tx6\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext34 \spriority0 footer;}}
{\*\rsidtbl \rsid12665142\rsid15102272\rsid15337289}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\title EA IFF 85}
{\subject IFF Standard for Interchange Format Files}{\author Jerry Morrison}{\operator Jerry Morrison}{\creatim\yr2013\mo11\dy5\hr14\min23}{\revtim\yr2013\mo11\dy5\hr14\min23}{\printim\yr2013\mo11\dy5\hr14\min21}{\version2}{\edmins2}{\nofpages22}
{\nofwords9951}{\nofchars51138}{\nofcharsws60968}{\vern32773}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr720\margt720\margb720\gutter0\ltrsect 
\ftnbj\aenddoc\linestart65536\hyphhotz0\trackmoves0\trackformatting1\donotembedsysfont1\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors1
\makebackup\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0\jexpand\viewkind4\viewscale120\bdrrlswsix\nolnhtadjtbl\nojkernpunct\rsidroot15337289 \fet0
{\*\wgrffmtfilter 2450}\ilfomacatclnup0\stylesortmethod0{\*\ftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 
\f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 \ltrch\fcs0 \insrsid12665142 \chftnsep 
\par }}{\*\ftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 
\ltrch\fcs0 \insrsid12665142 \chftnsepc 
\par }}{\*\aftnsep \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 
\ltrch\fcs0 \insrsid12665142 \chftnsep 
\par }}{\*\aftnsepc \ltrpar \pard\plain \ltrpar\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af8 
\ltrch\fcs0 \insrsid12665142 \chftnsepc 
\par }}\ltrpar \sectd \ltrsect\linex0\linestarts65536\endnhere\sectdefaultcl\sftnbj {\footerr \ltrpar \pard\plain \ltrpar\s34\ql \li180\ri0\widctlpar\tqc\tx3\tqr\tx6\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0 \rtlch\fcs1 
\af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af4 \ltrch\fcs0 \f4\fs20\insrsid12665142 \chpgn }{\rtlch\fcs1 \af8 \ltrch\fcs0 \insrsid12665142 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\qc \li180\ri580\nowidctlpar
\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 \rtlch\fcs1 \af8\afs20\alang1025 \ltrch\fcs0 \f8\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af51\afs36 \ltrch\fcs0 
\f51\fs36\ul\insrsid12665142 "EA IFF 85" Standard for Interchange Format Files
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx2430\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par 
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Document Date:}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 \tab January 14, 1985  (Updated Oct, 1988 Commodore-Amiga, Inc.)
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 From:}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 \tab Jerry Morrison, Electronic Arts
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Status of Standard:}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 \tab Released to the public domain, and in use
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\insrsid12665142 
\par 
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 1.  Introduction
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Standards are Good for Software Developers
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par As home computer hardware evolves into better and better media machines, the demand increases for higher quality, more detailed data.  Data development gets more expensive, requires more expertise and better tools, and has to be shared across projects.  T
hink about several ports of a product on one CD-ROM with 500M Bytes of common data!
\par 
\par Development tools need standard interchange file formats.  Imagine scanning in images of "player" shapes,  transferring them to an imag
e enhancement package, moving them to a paint program for touch up, then incorporating them into a game.  Or writing a theme song with a Macintosh score editor and incorporating it into an Amiga game.  The data must at times be transformed, clipped, fille
d out, and moved across machine kinds.  Media projects will depend on data transfer from graphic, music, sound effect, animation, and script tools.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Standards are Good for Software Users
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Customers should be able to move their own data between independentl
y developed software products.  And they should be able to buy data libraries usable across many such products.  The types of data objects to exchange are open-ended and include plain and formatted text, raster and structured graphics, fonts, music, sound
 effects, musical instrument descriptions, and animation.
\par 
\par The problem with expedient file formats\emdash typically memory dumps\emdash is that they're too provincial.  By designing data for one particular use (such as a screen snapshot), they preclude future expansion (
would you like a full page picture? a multi-page document?).  In neglecting the possibility that other programs might read their data, they fail to save contextual information (how many bit planes? what resolution?).  Ignoring that other programs might cr
eate such files, they're intolerant of extra data (a different picture editor may want to save a texture palette with the image), missing data (such as no color map), or minor variations (perhaps a smaller image).  In practice, a filed representation shou
ld }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 rarely}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 mirror an in-memory representation.  The former should be designed for longevity; the latter to optimize the manipulations of a particular program.  The same filed data will be read into different memory formats by different programs.
\par 
\par The IFF philosophy: "A little behind-the-scenes conversion when programs read and write files is far better than NxM explicit conversion utilities for highly specialized formats".
\par 
\par So we need some standardization for data interchange among development tools and products.  The more developers that adopt a standard, the better for all of us and our customers.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Here is "EA IFF 1985"
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Here is our offering: Electronic Arts' IFF standard for }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 I}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 nterchange }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 F}{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 ile }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 F}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
ormat.  The full name is "EA IFF 1985".  Alternatives and justifications are included for certain choices.  Public domain subroutine packages and utility programs are available to make it easy to write and use IFF-compatible programs.
\par 
\par Part 1 introduces the standard.  Part 2 presents its requirements and background.  Pa
rts 3, 4, and 5 define the primitive data types, FORMs, and LISTs, respectively, and how to define new high level types.  Part 6 specifies the top level file structure.  Section 7 lists names of the group responsible for this standard.  Appendix A is incl
uded for quick reference and Appendix B.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 \page References
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 American}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 National}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Standard}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Additional}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Control}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Codes}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 for}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Use}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 with}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 ASCII}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 , ANSI standard 3.64-1979 for an 8-bit character set.  See also ISO standard 2022 and ISO/DIS standard 6429.2.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 The C Programming Language,}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  Brian W. Kernighan and Dennis M. Ritchie, Bell Laboratories.  Prentice-Hall, Englewood Cliffs, NJ, 1978.

\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 C}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 , }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 A}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Reference}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Manual}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
, Samuel P. Harbison and Guy L. Steele Jr., Tartan Laboratories.  Prentice-Hall, Englewood Cliffs, NJ, 1984.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Compiler}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Construction}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 , }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 An}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Advanced}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Course}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
, edited by F. L. Bauer and J. Eickel (Springer-Verlag, 1976).  This book is one of many sources for information on recursive descent parsing.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 DIF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Technical}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Specification}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  \'a9 1981 by Software Arts, Inc.  DIF\'99 is the format for
 spreadsheet data interchange developed by Software Arts, Inc.  DIF\'99 is a trademark of Software Arts, Inc.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 "FTXT"}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 IFF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Formatted}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Text}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
, from Electronic Arts.  IFF supplement document for a text format.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 "ILBM"}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 IFF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Interleaved}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Bitmap}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
, from Electronic Arts.  IFF supplement document for a raster image format.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 M68000}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 16/32-Bit}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  
}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Microprocessor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Programmer's}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Reference}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Manual}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  \'a9 1984, 1982, 1980, 1979 by Motorola, Inc.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 PostScript}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Language}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Manual}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  \'a9 1984 Adobe Systems Incorporated.
\par PostScript\'99 is a trademark of Adobe Systems, Inc.
\par Times and Helvetica\'ae are registered trademarks of Allied Corporation.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Inside}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Macintosh}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  
\'a9 1982, 1983, 1984, 1985 Apple Computer, Inc., a programmer's reference manual.
\par Apple\'ae is a trademark of Apple Computer, Inc.
\par MacPaint\'99 is a trademark of Apple Computer, Inc.
\par Macintosh\'99 is a trademark licensed to Apple Computer, Inc.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 InterScript:}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 A}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Proposal}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 for}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 a}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Standard}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 for}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 the}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Interchange}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 of}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Editable}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Documents}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  
\'a9 1984 Xerox Corporation.  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Introduction}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 to}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 InterScript}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  \'a9 1985 Xerox Corporation.
\par 
\par Amiga}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\up6\insrsid12665142 \'ae}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  is a registered trademark of Commodore-Amiga, Inc.
\par 
\par Electronics Arts\'99 is a trademark of Electronic Arts.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 2.  Background for Designers
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Part 2 is about the background, requirements, and goals for the standard.  It's geared for people who want to design new types of IFF objects.  People just interested in using the standard may wish to quickly scan this section.
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 What Do We Need?
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A standard should be long on prescription and short on overhead.  It should give lots of rules for designing programs and data files 
for synergy.  But neither the programs nor the files should cost too much more than the expedient variety.  Although we are looking to a future with CD-ROMs and perpendicular recording, the standard must work well on floppy disks.
\par 
\par For program portability, simplicity, and efficiency, formats should be designed with more than one implementation style in mind.  It ought to be possible to read one of many objects in a file without scanning all the preceding data.   (In practice, pure s
tream I/O is adequate although random access makes it easier to write files.) Some programs need to read and play out their data in real time, so we need good compromises between generality and efficiency.
\par 
\par As much as we need standards, they can't hold up product schedules.  So we also need a kind of decentralized extensibility where any software developer can define and refine new object types without some "standards authority" in the loop.  Developers must
 be able to extend existing formats in a forward- and backward-compatible way.  A central repository for design information and example programs can help us take full advantage of the standard.
\par 
\par For convenience, data formats should heed the restrictions of various processors and environments.  For example, word-alignment greatly helps 68000 access at insignificant cost to 8088 programs.
\par 
\par Other goals include the ability to share common elements over a list of objects and the ability to construct composite objects. 
\par 
\par And finally, "Simple things should be simple and complex things should be possible".\emdash Alan Kay.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Think Ahead
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Let's think ahead and build programs that read and write files for each other and for programs yet to be designed.  Build data formats to last for future computers so long as the overhead is acceptable.  This extends the usefulness and life of today's pro
grams and data.
\par 
\par To maximize interconnectivity, the standard file structure and the specific object formats must all be general and extensible.  Think ahead when designing an object.  File formats should serve man
y purposes and allow many programs to store and read back all the information they need; even squeeze in custom data.  Then a programmer can store the available data and is encouraged to include fixed contextual details.  Recipient programs can read the n
eeded parts, skip unrecognized stuff, default missing data, and use the stored context to help transform the data as needed.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Scope
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par IFF addresses these needs by defining a standard file structure, some initial data object types, ways to define new types, 
and rules for accessing these files.  We can accomplish a great deal by writing programs according to this standard, but do not expect direct compatibility with existing software.  We'll need conversion programs to bridge the gap from the old world.

\par 
\par IFF is geared for computers that readily process information in 8-bit bytes.  It assumes a "physical layer" of data storage and transmission that reliably maintains "files" as sequences of 8-bit bytes.  The standard treats a "file" as a container of data 
bytes and is independent of how to find a file and whether it has a byte count.
\par 
\par This standard does not by itself implement a clipboard for cutting and pasting data between programs.  A clipboard needs software to mediate access, and provide a notification mechanism so updates and requests for data can be detected.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Data Abstraction
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The basic problem is }{\rtlch\fcs1 \af51 \ltrch\fcs0 \i\f51\fs20\insrsid12665142 how to represent information}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
  in a way that's program-independent, compiler- independent, machine-independent, and device-independent.
\par 
\par The computer science app
roach is "data abstraction", also known as "objects", "actors", and "abstract data types".  A data abstraction has a "concrete representation" (its storage format), an "abstract representation" (its capabilities and uses), and access procedures that isola
te all the calling software from the concrete representation.  Only the access procedures touch the data storage.  Hiding mutable details behind an interface is called "information hiding".  What is hidden are the non-portable details of implementing the 
object, namely the selected storage representation and algorithms for manipulating it.
\par 
\par The power of this approach is modularity.  By adjusting the access procedures we can extend and restructure the data without impacting the interface or its callers.  Conversely, we can extend and restructure the interface and callers without making existi
ng data obsolete.  It's great for interchange!
\par 
\par But we seem to need the opposite: fixed file formats for all programs to access.  Actually, we could file data abstractions
 ("filed objects") by storing the data and access procedures together.  We'd have to encode the access procedures in a standard machine-independent programming language \'e1
 la PostScript.  Even with this, the interface can't evolve freely since we can't update all copies of the access procedures.  So we'll have to design our abstract representations for limited evolution and occasional revolution (conversion).
\par 
\par In any case, today's microcomputers can't practically store true data abstractions.  They }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 can}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  do th
e next best thing: store arbitrary types of data in "data chunks", each with a type identifier and a length count.  The type identifier is a reference by name to the access procedures (any local implementation).  The length count enables storage-level obj
ect operations like "copy" and "skip to next" independent of object type or contents.
\par 
\par Chunk writing is straightforward.  Chunk reading requires a trivial parser to scan each chunk and dispatch to the proper access/conversion procedure.  Reading chunks nested inside other chunks may require recursion, but no look ahead or backup.
\par 
\par That's the main idea of IFF.  There are, of course, a few other details\'85
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Previous Work
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Where our needs are similar, we borrow from existing standards.
\par 
\par Our basic need to move data between independently developed programs is similar to that addressed by the Apple Macintosh desk scrap or "clipboard" [}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Inside}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Macintosh}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 chapter "Scrap Manager"].  The Scrap Manager works closely with the Resource Manager, a handy filer and swapper for data objects (text strings, dialog window templates, pictures, fonts\'85) including types yet to be designed [}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Inside}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Macintosh}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 chapter "Resource Manager"].  The Resource Manager is akin to Smalltalk's object swapper.
\par 
\par We will probably write a Macintosh desk accessory that converts IFF files to and from the Macintosh clipboard for quick and easy interchange with programs like MacPaint and Resource Mover.
\par 
\par Macintosh uses a simple and elegant scheme of four-character "identifiers" to identify resource types, clip
board format types, file types, and file creator programs.  Alternatives are unique ID numbers assigned by a central authority or by hierarchical authorities, unique ID numbers generated by algorithm, other fixed length character strings, and variable len
gth strings.  Character string identifiers double as readable signposts in data files and programs.  The choice of 4 characters is a good tradeoff between storage space, fetch/compare/store time, and name space size.  We'll honor Apple's designers by adop
ting this scheme.
\par 
\par "PICT" is a good example of a standard structured graphics format (including raster images) and its many uses [}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Inside}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 
\af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Macintosh}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 chapter "QuickDraw"].  Macintosh provides QuickDraw routines in ROM to create, manipulate, and display PICTs.  Any application can create a PICT by simply asking QuickDraw to record a sequence of drawing commands.  Since it's just as easy to ask QuickDra
w to render a PICT to a screen or a printer, it's very effective to pass them between programs, say from an illus
trator to a word processor.  An important feature is the ability to store "comments" in a PICT which QuickDraw will ignore.  (Actually, it passes them to your optional custom "comment handler".)
\par 
\par PostScript, Adobe System's print file standard, is a more general way to represent any print image (which is a specification for putting marks on paper) [}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 PostScript}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Language}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Manual}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid12665142 ].  In fact, PostScript is a full-fledged programming language.  To interpret a PostScript program is to render a document on a raster o
utput device.  The language is defined in layers: a lexical layer of identifiers, constants, and operators; a layer of reverse polish semantics including scope rules and a way to define new subroutines; and a printing-specific layer of built-in identifier
s and operators for rendering graphic images.  It is clearly a powerful (Turing equivalent) image definition language.  PICT and a subset of PostScript are candidates for structured graphics standards.
\par 
\par A PostScript document can be printed on any raster out
put device (including a display) but cannot generally be edited.  That's because the original flexibility and constraints have been discarded.  Besides, a PostScript program may use arbitrary computation to supply parameters like placement and size to eac
h operator.  A QuickDraw PICT, in comparison, is a more restricted format of graphic primitives parameterized by constants.  So a PICT can be edited at the level of the primitives, e.g. move or thicken a line.  It cannot be edited at the higher level of, 
say, the bar chart data which generated the picture.
\par 
\par PostScript has another limitation: Not all kinds of data amount to marks on paper.  A musical instrument description is one example.  PostScript is just not geared for such uses.
\par 
\par "DIF" is another example of data being stored in a general format usable by future programs [}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 DIF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 Technical}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Specification}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
].  DIF is a format for spreadsheet data interchange.  DIF and PostScript are both expressed in plain ASCII text files.  This is very handy for printing, debugg
ing, experimenting, and transmitting across modems.  It can have substantial cost in compaction and read/write work, depending on use.  We won't store IFF files this way but we could define an ASCII alternate representation with a converter program.

\par 
\par InterScript is Xerox' standard for interchange of editable documents [}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Introduction}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 to}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 InterScript}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
].  It approaches a harder problem: How to represent editable word processor documents that may contain formatted text, pictures, cross-references like figure numbe
rs, and even highly specialized objects like mathematical equations? InterScript aims to define one standard representation for each kind of information.  Each InterScript-compatible editor is supposed to preserve the objects it doesn't understand and eve
n maintain nested cross-references.  So a simple word processor would let you edit the text of a fancy document without discarding the equations or disrupting the equation numbers.
\par 
\par Our task is similarly to store high level information and preserve as much 
content as practical while moving it between programs.  But we need to span a larger universe of data types and cannot expect to centrally define them all.  Fortunately, we don't need to make programs preserve information that they don't understand.  And 
for better or worse, we don't have to tackle general-purpose cross-references yet.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 3.  Primitive Data Types
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Atomic components such as integers and characters that are interpretable directly by the CPU are specified in one format for all processors.  We chose a format that's the same as used by the Motorola MC68000 processor [}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 M68000}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 16/32-Bit}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 Microprocessor}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Programmer's}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Reference}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Manual}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
].  The high byte and high word of a number are stored }{\rtlch\fcs1 \af51 \ltrch\fcs0 \i\f51\fs20\insrsid12665142 first}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 .
\par 
\par N.B.: Part 3 dictates the format for "primitive" data types where\emdash and only where\emdash 
used in the overall file structure. The number of such occurrences of dictated formats will be small enough that the costs of conversion, storage, and management of processor-specific files would far exceed the costs of conversion duri
ng I/O by "foreign" programs.  A particular data chunk may be specified with a different format for its internal primitive types or with processor or environment specific variants if necessary to optimize local usage.  Since that hurts data interchange, i
t's not recommended.  (Cf. Designing New Data Sections, in Part 4.).
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Alignment
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par All data objects larger than a byte are aligned on }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 even}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 byte addresses relative to the start of the file.  This may require padding.  Pad bytes are to be written as zeros, but don't count on that when reading.
\par 
\par This means that every odd-length "chunk" }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 must}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 be padded so that the next one will fall on an even boundary.  Also, designers of structures to be stored in chunks should include pad fields where needed to align every field larger than a byte.  For best efficiency, long word data should be arranged on
 long word (4 byte) boundaries.  Zeros should be stored in all the pad bytes.
\par 
\par Justification: Even-alignment causes a little extra work for files that are used only on certain 
processors but allows 68000 programs to construct and scan the data in memory and do block I/O.  Any 16 bit or greater CPU will have faster access to aligned data.  You just add an occasional pad field to data structures that you're going to block read/wr
ite or else stream read/write an extra byte.  And the same source code works on all processors.  Unspecified alignment, on the other hand, would force 68000 programs to (dis)assemble word and long word data one byte at a time.  Pretty cumbersome in a high
 level language.  And if you don't conditionally compile that step out for other processors, you won't gain anything.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Numbers
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Numeric types supported are two's complement binary integers in the format used by the MC68000 processor\emdash high byte first, high word first\emdash the reverse of 8088 and 6502 format.
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx2430\tx7020\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 UBYTE\tab  8 bits unsigned
\par WORD\tab 16 bits signed
\par UWORD\tab 16 bits unsigned
\par LONG\tab 32 bits signed
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The actual type definitions depend on the CPU and the compiler.  In this document, we'll express data type definitions in the C programming language.  [See }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 C}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 , }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 A}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Reference}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Manual}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 .] In 68000 Lattice C:
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx3420\tx4590\tx7020\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 typedef unsigned char\tab UBYTE;\tab 
/*  8 bits unsigned\tab */
\par typedef short\tab WORD;\tab /* 16 bits signed\tab */
\par typedef unsigned short\tab UWORD;\tab /* 16 bits unsigned\tab */
\par typedef long\tab LONG;\tab /* 32 bits signed\tab */
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
Characters
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The following character set is assumed wherever characters are used, e.g. in text strings, IDs, and TEXT chunks (see below).  Characters are encoded in 8-bit ASCII.  Characters in the range NUL (hex 0) through DEL (hex 7F) are well d
efined by the 7-bit ASCII standard.  IFF uses the graphic group \'93 \'94 (SP, hex 20) through \'93~\'94 (hex 7E).
\par 
\par Most of the control character group hex 01 through hex 1F have no standard meaning in IFF.  The control character LF (hex 0A) is defined as a "newline" character.  It denotes an intentional line break, that is, a paragraph or line terminator.  (There is n
o way to store an automatic line break.  That is strictly a function of the margins in the environment the text is placed.) The control character ESC (hex 1B) is a reserved escape character under the rules of ANSI standard 3.64-1979 }{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\ul\insrsid12665142 American}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 National}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 
\af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Standard}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Additional}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Control}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Codes}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 for}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Use}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 with}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 ASCII}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
, ISO standard 2022, and ISO/DIS standard 6429.2.
\par 
\par Characters in the range hex 7F through hex FF are not globally defined in IFF.  They are best left reserved for future standardization.  (Note that the FORM type FTXT (formatted text) defines the meaning of these characters within FTXT forms.)  In particu
lar, character values hex 7F through hex 9F are control codes while characters hex A0 through hex FF are extended graphic characters like \'c5, as per the ISO and ANSI standards cited above.  [See the supplementary document }{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\ul\insrsid12665142 "FTXT"}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 IFF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Formatted}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Text}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 .]
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Dates
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A "creation date" is defined as the date and time a stream of data bytes was created.  (Some systems call this a "last modified date".) Editing some data changes its creation date.  Moving the data between volumes or machines does not.
\par 
\par The IFF standard date format will be one of those used in MS-DOS, Macintosh, or AmigaDOS (probably a 32-bit unsigned number of seconds since a reference point).  Issue: Investigate these three.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Type IDs
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A "type ID", "property name", "FORM type", or any other IFF identifier is a 32-bit value: the concatenation of four ASCII characters in the range \'93 \'94 (SP, hex 20) through \'93~\'94
 (hex 7E).  Spaces (hex 20) should not precede printing characters; trailing spaces are ok.  Control characters are forbidden.
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 typedef CHAR ID[4];
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par IDs are compared using a simple 32-bit case-dependent equality test.  FORM type IDs are restricted.  Since they may be stored in filename extensions  lower case letters and punctuation marks are forbidden.  Trailing spaces are ok.
\par 
\par Carefully choose those four characters when you pick a new ID.  Make them mnemonic so programmers can look at an interchange format file and figure out what kind of data it contains.  The name space makes it possible for developers scattered around the gl
obe to generate ID values with minimal collisions so long as they choose specific names like "MUS4" instead of general ones like "TYPE" and "FILE".
\par 
\par Commodore-Amiga Technical Support has undertaken the task of maintaining the registry of FORM type IDs and format descriptions.  See the IFF registry document for more information.
\par 
\par Sometimes it's necessary to make data format changes that aren't backward compatible.  As much as we work for compatibility, unintended interactions can develop.  Since IDs are used to denote data formats in IFF, new IDs are chosen to denote revised forma
ts.  Si
nce programs won't read chunks whose IDs they don't recognize (see Chunks, below), the new IDs keep old programs from stumbling over new data.  The conventional way to chose a "revision" ID is to increment the last character if it's a digit or else change
 the last character to a digit.  E.g. first and second revisions of the ID "XY" would be "XY1" and "XY2".  Revisions of "CMAP" would be "CMA1" and "CMA2".
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
Chunks
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
Chunks are the building blocks in the IFF structure.  The form expressed as a C typedef is:
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx1620\tx4410\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 typedef struct \{
\par \tab ID\tab ckID;\tab /* 4 character ID */
\par \tab LONG\tab ckSize;\tab /* sizeof(ckData) */
\par \tab UBYTE\tab ckData[/* ckSize */];
\par \tab \} Chunk;
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par We can diagram an example chunk\emdash a "CMAP" chunk containing 12 data bytes\emdash like this:
\par 
\par }\pard \ltrpar\ql \li3060\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin3060\itap0\pararsid15337289 {\pard\plain \ltrpar
\ql \li3060\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin3060\itap0\pararsid15337289 \rtlch\fcs1 \af51\afs20\alang1025 \ltrch\fcs0 \f51\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033\insrsid15337289 {\object\objemb
\objw3881\objh1860\objscalex95\objscaley91{\*\objclass Word.Picture.8}{\*\objdata 01050000020000000f000000576f72642e506963747572652e3800000000000000000000120000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff07000000feffffff040000000500000006000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff020000000709020000000000c000000000000046000000000000000000000000e075
32ac75dace01030000008007000000000000030050004900430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
000000000000000000000000640000000000000003004d004500540041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0002010100000003000000ffffffff0000000000000000000000000000000000000000000000000000
00000000000000000000020000006e03000000000000030050004900430054000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000201ffffffff04000000ffffffff000000000000000000000000000000000000000000000000
000000000000000000000000100000000a0300000000000001000000feffffff030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000feffffff1100000012000000130000001400000015000000160000001700000018000000190000001a00
00001b0000001c000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6400020001000000000008000d1400009d090000280f00004407000000000000000000000000000000000000bc0300009003000000000000000000000000000000000000000000ff00000000000000ff00000000000000ff000000000000
00ff000000000000000000000000000000000000000000000000000000000000000008000d149d090000010009000003b301000007001c0000000000050000000b0209000900050000000c025d00c2000500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102
ffffff00030000001e001c000000fb02f6ff00000000000090010000000000000030436f757269657200921d0a058077cb080ce12300d894487680014c76de1e663c040000002d0100000c00000021050b00302c20302c2036342c2030005e0053000c00000021050b00302c20302c2036342c2030004c0053000c000000
21050b00302c20302c20302c203332003a00530008000000fa0206000100000000000000040000002d01010005000000140252004c000500000013025200af0005000000140240004c000500000013024000af0008000000fa0206000200000000000000040000002d0102000500000014022e004c000500000013022e00
af00040000002d01010004000000f00102000500000014021c004c000500000013021c00af000700000021050200313228005300090000002105060091434d4150921600530007000000fc020000000000000000040000002d0102000c00000024030400400064003d005e0043005e00400064000c000000240304004000
2e003d0034004300340040002e0005000000140261004000050000001302340040000a00000021050700636b53697a653a0028000b000900000021050500636b49443a6516000b000a00000021050700636b446174613a003a000b0007000000fc020000ffffff000000040000002d01030008000000fa02050001000000
00000000040000002d0104000e00000024030500370043004800430048004f0037004f0037004300070000002105020031324c00380007000000fc020100000000000000040000002d01050008000000fa0206000200000000000000040000002d010600070000001b046500b00009004b00040000002d01020004000000
2d01040004000000f00106000b0000001a08090097000900e7006e00c9005a00b5000b0000001a086500e700650097001400c9000000b500040000002d0101000500000014021200be000500000013025c00be00040000002d010300040000002d0104000e00000024030500b8003200c9003200c9003e00b8003e00b800
3200070000002105020032303b00b900040000002701ffff030000000000000000000000000000000000000000000000030a00090009006600cb1101a00082a100960006050000000215a1009a0008fffd000000230000a0009801000a00090009006600cb0300160d000a2b535e0b302c20302c2036342c2030a00099a0
0097a100960006050000000215a1009a0008fffd000000230000a0009828004c00530b302c20302c2036342c2030a00099a00097a100960006050000000215a1009a0008fffd000000230000a0009828003a00530b302c20302c20302c203332a00099a00097220052004c6300220040004c6300070002000222002d004b
6300070001000122001c004c6300a100960006050000000215a1009a0008fffd000000080000a000982800280053023132a00099a00097a100960006050000000215a1009a0008fffd000000140000a00098280016005306d4434d4150d5a00099a00097a000a0a000a584003c005e003e00630043005e003e00437fff00
5f004200437fff0060003e003f7fff0061004100427fff0062003f00407fff0063004000417fff7fff2200640040fdfa23060023fd06a000a1a000a0a000a5840044002e003d00340043002e004000417fff002f003f00407fff0030004100427fff0031003e003f7fff0032004200437fff0033003d003e7fff0034003d
00437fff7fff22002e0040fd0623060023fdfaa000a1220061004000d3a100960006050000000215a1009a0008fffd000000170000a00098280028000b07636b53697a653aa00099a00097a100960006050000000215a1009a0008fffd000000110000a00098280016000b05636b49443aa00099a00097a1009600060500
00000215a1009a0008fffd000000170000a000982a2407636b446174613aa00099a00097a1009600060500000002153200430037004f0048a1009a0008fffd000000080000a000982b2d12023132a00099a000970700020002300009004b006500b0a000ac61005a00b5006e00c9ffe8003061000000b5001400c9009c00
30070001000122001200be004aa000ada10096000605000000021532003200b8003e00c9a1009a0008fffd000000080000a0009828003b00b9023230a00099a00097a00083ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200
030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003004f0062006a0049006e0066006f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000012000200ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000001d0000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000050000000d0000004d45544146494c4550494354000d14000063f6ffff6e03000008000d149d090000
010009000003b301000007001c0000000000050000000b0209000900050000000c025d00c2000500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e001c000000fb02f6ff00000000000090010000000000000030436f757269657200
921d0a058077cb080ce12300d894487680014c76de1e663c040000002d0100000c00000021050b00302c20302c2036342c2030005e0053000c00000021050b00302c20302c2036342c2030004c0053000c00000021050b00302c20302c20302c203332003a00530008000000fa0206000100000000000000040000002d01
010005000000140252004c000500000013025200af0005000000140240004c000500000013024000af0008000000fa0206000200000000000000040000002d0102000500000014022e004c000500000013022e00af00040000002d01010004000000f00102000500000014021c004c000500000013021c00af0007000000
21050200313228005300090000002105060091434d4150921600530007000000fc020000000000000000040000002d0102000c00000024030400400064003d005e0043005e00400064000c0000002403040040002e003d0034004300340040002e0005000000140261004000050000001302340040000a00000021050700
636b53697a653a0028000b000900000021050500636b49443a6516000b000a00000021050700636b446174613a003a000b0007000000fc020000ffffff000000040000002d01030008000000fa0205000100000000000000040000002d0104000e00000024030500370043004800430048004f0037004f00370043000700
00002105020031324c00380007000000fc020100000000000000040000002d01050008000000fa0206000200000000000000040000002d010600070000001b046500b00009004b00040000002d010200040000002d01040004000000f00106000b0000001a08090097000900e7006e00c9005a00b5000b0000001a086500
e700650097001400c9000000b500040000002d0101000500000014021200be000500000013025c00be00040000002d010300040000002d0104000e00000024030500b8003200c9003200c9003e00b8003e00b8003200070000002105020032303b00b900040000002701ffff030000000000}{\result {\rtlch\fcs1 
\af51 \ltrch\fcs0 \f51\fs20\insrsid15337289 {\pict\wmetafile8\picw5133\pich2461\picwgoal3880\pichgoal1860 \picscalex95\picscaley91 
010009000003b301000007001c0000000000050000000b0209000900050000000c025d00c2000500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e001c000000fb02f6ff00000000000090010000000000000030436f75726965720092
1d0a058077cb080ce12300d894487680014c76de1e663c040000002d0100000c00000021050b00302c20302c2036342c2030005e0053000c00000021050b00302c20302c2036342c2030004c0053000c00000021050b00302c20302c20302c203332003a00530008000000fa0206000100000000000000040000002d010100
05000000140252004c000500000013025200af0005000000140240004c000500000013024000af0008000000fa0206000200000000000000040000002d0102000500000014022e004c000500000013022e00af00040000002d01010004000000f00102000500000014021c004c000500000013021c00af0007000000210502
00313228005300090000002105060091434d4150921600530007000000fc020000000000000000040000002d0102000c00000024030400400064003d005e0043005e00400064000c0000002403040040002e003d0034004300340040002e0005000000140261004000050000001302340040000a00000021050700636b5369
7a653a0028000b000900000021050500636b49443a6516000b000a00000021050700636b446174613a003a000b0007000000fc020000ffffff000000040000002d01030008000000fa0205000100000000000000040000002d0104000e00000024030500370043004800430048004f0037004f003700430007000000210502
0031324c00380007000000fc020100000000000000040000002d01050008000000fa0206000200000000000000040000002d010600070000001b046500b00009004b00040000002d010200040000002d01040004000000f00106000b0000001a08090097000900e7006e00c9005a00b5000b0000001a086500e70065009700
1400c9000000b500040000002d0101000500000014021200be000500000013025c00be00040000002d010300040000002d0104000e00000024030500b8003200c9003200c9003e00b8003e00b8003200070000002105020032303b00b900040000002701ffff030000000000}}}}}\sectd \ltrsect
\linex0\linestarts65536\endnhere\sectdefaultcl\sftnbj {\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par That's 4 bytes of }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 , 4 bytes of }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  and 12 data bytes.  The total space used is 20 bytes.
\par 
\par The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  identifies the format and purpose of the chunk.  As a rule, a program must recognize }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  to interpret }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckData}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
.  It should skip over all unrecognized chunks.  The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  also serves as a format versi
on number as long as we pick new IDs to identify new formats of }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckData}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  (see above).
\par 
\par The following }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
s are universally reserved to identify chunks with particular IFF meanings: "LIST", "FORM", "PROP", "CAT ", and "    ".  The special ID "    " (4 spaces) is a }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 
 for "filler" chunks, that is, chunks that fill space but have no meaningful contents.  The IDs "LIS1" through "LIS9", "FOR1" through "FOR9", and "CAT1" through "CAT9" are reserved for future "version number" variations.  All IFF-compatible softw
are must account for these chunk IDs.
\par 
\par The ckSize is a logical block size\emdash how many data bytes are in ckData.  If }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckData}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 is an odd number of bytes long, a 0 pad byte follows which is }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 not}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  included in }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 
ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 .  (Cf. Alignment.) A chunk's total physical size is }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 rounded up to an even number plus the size of the header.  So the smallest chunk is 8 bytes long with }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize = 0}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
.  For the sake of following chunks, programs must respect every chunk's ckSize as a virtual end-of-file for reading its }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckData}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  even if 
that data is malformed, e.g. if nested contents are truncated.
\par 
\par We can describe the syntax of a chunk as a regular expression with "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 #}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 " representing the }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 , the length of the following \{braced\} bytes.  The "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 [0]}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 " represents a sometimes needed pad byte.  (The regular expressions in this document are collected in Appendix A along with an explanation of notation.)
\par 
\par }\pard \ltrpar\ql \fi-1440\li1980\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1980\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 Chunk\tab ::= ID #\{ UBYTE* \} [0]
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par One chunk output technique is to stream write a chunk header, stream write the chunk contents, then random access b
ack to the header to fill in the size.  Another technique is to make a preliminary pass over the data to compute the size, then write it out all at once.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Strings, String Chunks, and String Properties
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par In a string of ASCII text, linefeed (0x0A) denotes a forced line break (paragraph or line terminator).  Other control characters are not used.  (Cf. Characters.)  For maximum compatibility with line editors, two linefeed characters are often used to indic
ate a paragraph boundary.
\par 
\par The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  for a chunk that c
ontains a string of plain, unformatted text is "TEXT".  As a practical matter, a text string should probably not be longer than 32767 bytes.  The standard allows up to 2}{\rtlch\fcs1 \af51\afs18 \ltrch\fcs0 \f51\fs18\up6\insrsid12665142 31}{\rtlch\fcs1 
\af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  - 1 bytes.  The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  "TEXT" is globally reserved for this use.
\par 
\par When used as a data property (see below), a text string chunk may be 0 to 255 characters long.  Such a string is readily converted to a C string or a Pascal }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 STRING[255]}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid12665142 .  The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  of a property must have a unique property name, }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\i\f51\fs20\insrsid12665142 not}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142   "TEXT".
\par 
\par When used as a }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 part}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  of a chunk or 
data property, restricted C string format is normally used.  That means 0 to 255 characters followed by a NULL byte (ASCII value 0).
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Data Properties (advanced topic)
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Data properties specify attributes for following (non-property) chunks.  A data property essentially says "identifier = value", for example "XY = (10, 200)", telling something about following chunks.  Properties may only appear inside data sections ("FORM
" chunks, cf. Data Sections) and property sections ("PROP" chunks, cf. Group PROP).
\par 
\par The form of a data property is a type of Chunk.  The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  is a property name as well as a property type.  The }{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  should be small since data properties are intended to be accumulated in RAM when reading a file.  (256 bytes is a reasonable upper bound.) Syntactically:
\par 
\par }\pard \ltrpar\ql \fi-1440\li1980\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1980\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 Property\tab ::= Chunk
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par When designing a data object, use properties to describe context information like the size of an image, even if they don't vary in your program.  Other programs will need this information.
\par 
\par Think of property settings as ass
ignments to variables in a programming language.  Multiple assignments are redundant and local assignments temporarily override global assignments.  The order of assignments doesn't matter as long as they precede the affected chunks.  (Cf. LISTs, CATs, an
d Shared Properties.)
\par 
\par Each object type (FORM type) is a local name space for property IDs.  Think of a "CMAP" property in a "FORM ILBM" as the qualified ID "ILBM.CMAP".  A "CMAP" inside some other type of FORM may not have the same meaning.  Property IDs s
pecified when an object type is designed (and therefore known to all clients) are called "standard" while specialized ones added later are "nonstandard".
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Links
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Issue: A standard mechanism for "links" or "cross references" is very desirable for things like combining images and sounds into animations.  Perhaps we'll define "link" chunks within FORMs that refer to other FORMs or to specific chunks within the same a
nd other FORMs.  This needs further work.  EA IFF 1985 has no standard link mechanism.
\par 
\par For now, it may suffice to read a list of, say, musical instruments, and then just refer to them within a musical score by  sequence  number.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 File References
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Issue: We may need a standard form for references to other files.  A "file ref" could name a directory and a file in the same type of operating system as the reference's originator.  Following the reference would expect the file to be on some mounted volu
me, or perhaps the same directory as the file that made the reference.  In a network environment, a file reference could name a server, too.
\par 
\par Issue: How can we express operating-system independent file references?
\par Issue: What about a means to reference a portion of another file? Would this be a "file ref" plus a reference to a "link" within the target file?
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 
\par 
\par 
\par 4.  Data Sections
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The first thing we need of a file is to check: Does it contain IFF data and, if so, does it contain the kind of data we're looking for? So we come to the notion of a "data section".
\par 
\par A "data section" or IFF "FORM" is one self-contai
ned "data object" that might be stored in a file by itself.  It is one high level data object such as a picture or a sound effect, and generally contains a grouping of chunks.  The IFF structure "FORM" makes it self- identifying.  It could be a composite 
object like a musical score with nested musical instrument descriptions.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Group FORM
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A data section is a chunk with }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  "FORM" and this arrangement:
\par 
\par }\pard \ltrpar\ql \fi-1440\li1980\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1980\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 FORM\tab ::= "FORM" #\{
 FormType (LocalChunk | FORM | LIST | CAT)* \}
\par FormType\tab ::= ID
\par LocalChunk\tab ::= Property | Chunk
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The ID "FORM" is a syntactic keyword like "struct" in C.  Think of a "struct ILBM" containing a field "CMAP".  If you see "FORM" you will know to expect a FORM type ID (the structure name, "ILBM" in this example) and a particular contents arrangement or "
syntax" (local chunks, FORMs, LISTs, and CATs).  A "FORM ILBM", in particular, might contain a local chunk "CMAP", an "ILBM.CMAP" (to use a qualified name).
\par 
\par So the chunk ID "FORM" indicates a data section.  It implies that the chunk contains an ID and some number of nested chunks.  In reading a FORM, like any other chunk, programs must respect its }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize
}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  as a virtual end-of-file for reading its contents, even if they're truncated.
\par 
\par The FORM type is a restricted ID that may not contain lower case letters or punctuation characters.  (Cf. Type IDs.  Cf. Single Purpose Files.)
\par 
\par The type-specific information in a FORM is composed of its "local chunks": data properties and other chunks.  Each FORM type is a local name space for local chunk IDs.  So "CMAP"
 local chunks in other FORM types may be unrelated to "ILBM.CMAP".  More than that, each FORM type defines semantic scope.  If you know what a FORM ILBM is, you will know what an ILBM.CMAP is.
\par 
\par Local chunks defined when the FORM type is designed (and therefore known to all clients of this type) are called "standard" while specialized ones added later are "nonstandard".
\par 
\par Among the local chunks, property chunks give settings for various details like text font while the other chunks supply the essential inform
ation.  This distinction is not clear cut.  A property setting can be cancelled by a later setting of the same property.  E.g. in the sequence:
\par 
\par }\pard \ltrpar\ql \fi-1260\li1800\ri580\nowidctlpar\tx3150\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1800\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 prop1 = x  (Data A)  prop1 = z  prop1 = y (Data B)

\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 prop1 is = x}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  for Data A, and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 y}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  for Data B.  The setting }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 prop1 = z}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  has no effect.
\par 
\par For clarity, the universally reserved chunk IDs "LIST", "FORM", "PROP", "CAT ", "    ", "LIS1" through "LIS9", "FOR1" through "FOR9", and "CAT1" through "CAT9" may not be FORM type IDs.
\par 
\par Part 5, below, talks about grouping FORMs into LISTs and CATs.  They let you group a bunch of FORMs but don't impose any particular meaning or constraints on the grouping.  Read on.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Composite FORMs
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A FORM chunk inside a FORM is a full-fledged data section.  This means you can build a composite object such as a multi-frame animation sequence by nesting available picture FORMs and sound effect FORMs.  You can insert additional chunks with information 
like frame rate and frame count.
\par 
\par Using composite FORMs, you leverage on existing programs that create and edit the component FORMs.  Those editors may even look into your composite object to copy out its type of component.  Such editors are }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 not}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 allowed to replace their component objects within your composite object.  That's because the IFF standard lets you specify consistency requirements for the composite FORM such as maintaining a count or a directory of the components.  Only programs that a
re written to uphold the rules of your FORM type may create or modify such FORMs.
\par 
\par Therefore, in designing a program that creates composite objects, you are }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 strongly}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 requested}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  to provide a facility for your users to import and export the nested FORMs.  Import and export could move the data through a clipboard or a file.
\par 
\par 
\par 
\par Here are several existing FORM types and rules for defining new ones:
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 FTXT
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
An FTXT data section contains text with character formatting information like fonts and faces.  It has no paragraph or document formatting information like margins and page headers.  FORM FTXT is well matched to the text re
presentation in Amiga's Intuition environment.  See the supplemental document }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 "FTXT"}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 IFF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Formatted}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 Text}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 .
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 ILBM
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par "ILBM" is an }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 I}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 nter}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 L}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 eaved }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 B}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 it}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 M}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 ap image with color map; a machine-independent format for raster images.  FORM ILBM is the standard image file format for the Commodore-Amiga computer and is useful in other environments, too.  See the supplemental document }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 "ILBM"}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 IFF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Interleaved}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Bitmap}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 .

\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 PICS
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The data chunk inside a "PICS" data section has ID "PICT" and holds a QuickDraw picture.  Issue: Allow more than one PICT in a PICS? See }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Inside}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Macintosh}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 chapter "QuickDraw" for details on PICTs and how to create and display them on the Macintosh computer.
\par 
\par The only standard property for PICS is "XY", an optional property that indicates the position of the PICT relative to "the big picture".  The contents of an XY is a QuickDraw Point.
\par 
\par Note: PICT may be limited to Macintosh use, in which case there'll be another format for structured graphics in other environments.
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Other Macintosh Resource Types
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Some other Macintosh resource types could be adopted for use within IFF files; perhaps MWRT, ICN, ICN#, and STR#.
\par 
\par Issue: Consider the candidates and reserve some more IDs.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
Designing New Data Sections
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Supplemental documents will define additional object types.  A supplement needs to specify the object's purpose, its FORM type ID, the IDs and formats of standard local chunks, and rules for generating and interpreting the data.  It's a good idea to suppl
y typedefs and an example source program that accesses the new object.  See }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 "ILBM"}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 IFF}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Interleaved}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 Bitmap}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  for such an example.
\par 
\par Anyone can pick a new FORM type ID but should reserve it with Commodore-Amiga Technical Support (CATS) at their earliest convenience.  While decentralized format definitions and extensions are possible in IFF, our preference is to get design consensus by 
committee, implement a program to read and write it, perhaps tune the format before it becomes locked in stone, and then publish the format with example code.  Some organization should remain in cha
rge of answering questions and coordinating extensions to the format.
\par 
\par If it becomes necessary to incompatibly revise the design of some data section, its FORM type ID will serve as a version number (Cf. Type IDs).  E.g. a revised "VDEO" data section could be called "VDE1".  But try to get by with compatible revisions within
 the existing FORM type.
\par 
\par In a new FORM type, the rules for primitive data types and word-alignment (Cf. Primitive Data Types) may be overridden for the contents of its local chunks\emdash but not for the chunk structure itself\emdash 
if your documentation spells out the deviations.  If machine-specific type variants are needed, e.g. to store vast numbers of integers in reverse bit order, then outline the conversion algorithm and indicate the variant 
inside each file, perhaps via different FORM types.  Needless to say, variations should be minimized.
\par 
\par In designing a FORM type, encapsulate all the data that other programs will need to interpret your files.  E.g. a raster graphics image should specify the
 image size even if your program always uses 320 x 200 pixels x 3 bitplanes.  Receiving programs are then empowered to append or clip the image rectangle, to add or drop bitplanes, etc.  This enables a }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 lot}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  more compatibility.
\par 
\par Separate the central data (like musical notes) from more specialized information (like note beams) so simpler programs can extract the central parts during read-in.  Leave room for expansion so other programs can squeeze in new kinds of information (like 
lyrics).  And remember to keep the property chunks manageably short\emdash let's say \u8804\'3d 256 bytes.
\par 
\par When designing a data object, try to strike a good tradeoff between a super-general format and a highly-specialized one.  Fit the details to at least one particular need, for example a raster image might as well store pixels in the current machine's scan 
order.  But add the kind of generality that makes the format usable with foreseeable hardware and software.  E.g. use a whole byte for each red, green, and blue color value even if this year's co
mputer has only 4-bit video DACs.  Think ahead and help other programs so long as the overhead is acceptable.  E.g. run compress a raster by scan line rather than as a unit so future programs can swap images by scan line to and from secondary storage.

\par 
\par Try to design a general purpose "least common multiple" format that encompasses the needs of many programs without getting too complicated.  Be sure to leave provisions for future expansion.  Let's coalesce our uses around a few such formats widely separa
ted 
in the vast design space.  Two factors make this flexibility and simplicity practical.  First, file storage space is getting very plentiful, so compaction is not always a priority.  Second, nearly any locally-performed data conversion work during file rea
ding and writing will be cheap compared to the I/O time.
\par 
\par It must be ok to copy a LIST or FORM or CAT intact, e.g. to incorporate it into a composite FORM.  So any kind of internal references within a FORM must be relative references.  They could be relativ
e to the start of the containing FORM, relative from the referencing chunk, or a sequence number into a collection.
\par 
\par With composite FORMs, you leverage on existing programs that create and edit the components.  If you write a program that creates composite objects, }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 please}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  provide a facility for users to import and export the nested FORMs.
\par 
\par Finally, don't forget to specify all implied rules in detail.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 5.  LISTs, CATs, and Shared Properties}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\insrsid12665142  (Advanced topics)
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Data often needs to be grouped together, for exam
ple, consider a list of icons.  Sometimes a trick like arranging little images into a big raster works, but generally they'll need to be structured as a first class group.  The objects "LIST" and "CAT" are IFF-universal mechanisms for this purpose.  Note:
 LIST and CAT are advanced topics the first time reader will want to skip.
\par 
\par Property settings sometimes need to be shared over a list of similar objects.  E.g. a list of icons may share one color map.  LIST provides a means called "PROP" to do this.  One pu
rpose of a LIST is to define the scope of a PROP.  A "CAT", on the other hand, is simply a concatenation of objects.
\par 
\par Simpler programs may skip LISTs and PROPs altogether and just handle FORMs and CATs.  All "fully-conforming" IFF programs also know about "CAT ", "LIST", and "PROP".  Any program that reads a FORM inside a LIST }{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\ul\insrsid12665142 must}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  process shared PROPs to correctly interpret that FORM.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Group CAT
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A CAT is just an untyped group of data objects.
\par 
\par Structurally, a CAT is a chunk with chunk ID "CAT " containing a "contents type" ID followed by the nested objects.  The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 of each contained chunk is essentially a relative pointer to the next one.
\par 
\par }\pard \ltrpar\ql \fi-1620\li2160\ri580\nowidctlpar\tx4590\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin2160\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 CAT\tab ::= "CAT " #\{
 ContentsType (FORM | LIST | CAT)* \}
\par ContentsType\tab ::= ID\tab }{\rtlch\fcs1 \af8 \ltrch\fcs0 \i\f5\fs20\insrsid12665142 -- a hint or an "abstract data type" ID
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par In reading a CAT, like any other chunk, programs must respect it's }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 as a virtual end-of-file for reading the nested objects even if they're malformed or truncated.
\par 
\par The "contents type" following the CAT's }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  indicates what kind of FORMs are inside.  So a CAT of ILBMs would store "ILBM" there.  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 It's}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 just}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 a}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 hint}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
.  It may be used to store an "abstract data type".  A CAT could just have blank contents ID ("    ") if it contains more than one kind of FORM.
\par 
\par CAT defines only the }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 format}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  of the group.  The group's }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 meaning}{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 is open to interpretation.  This is like a list in LISP: the structure of cells is predefined but the meaning of the contents as, say, an association list depends on use.  If you need a group with an enforced meaning (an "abstract data 
type" or Smalltalk "subclass"), some consistency constraints, or additional data chunks, use a composite FORM instead (Cf. Composite FORMs).
\par 
\par Since a CAT just means a concatenation of objects, CATs are rarely nested.  Programs should really merge CATs rather than nest them.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Group LIST
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A LIST defines a group very much like CAT but it also gives a scope for PROPs (see below).  And unlike CATs, LISTs should not be merged without understanding their contents.
\par 
\par Structurally, a LIST is a chunk with }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  "LIST"
 containing a "contents type" ID, optional shared properties, and the nested contents (FORMs, LISTs, and CATs), in that order.  The }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 of each contained chunk is a relative pointer to the next one.  A LIST is not an arbitrary linked list\emdash the cells are simply concatenated.
\par 
\par }\pard \ltrpar\ql \fi-1440\li1980\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1980\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 LIST\tab ::= "LIST" #\{
 ContentsType PROP* (FORM | LIST | CAT)* \}
\par ContentsType\tab ::= ID
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\qc \li180\ri580\nowidctlpar
\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
\par Group PROP
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par PROP chunks may appear in LISTs (not in FORMs or CATs).  They supply shared properties for the FORMs in that LIST.  This ability to elevate
 some property settings to shared status for a list of forms is useful for both indirection and compaction.  E.g. a list of images with the same size and colors can share one "size" property and one "color map" property.  Individual FORMs can override the
 shared settings.
\par 
\par The contents of a PROP is like a FORM with no data chunks:
\par 
\par }\pard \ltrpar\ql \fi-1440\li1980\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1980\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 PROP\tab ::= "PROP" #\{ FormType Property* \}
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par It means, "Here are the shared properties for FORM type <FormType>".
\par 
\par A LIST may have at most one PROP of a FORM type, and all the PROPs must appear before any of the FORMs or nested LISTs and CATs.  You can have subsequences of FORMs sharing properties by making each subsequence a LIST.
\par 
\par 
\par Scoping: Think of property settings as variable bindings in nested blocks of a programming language.  In C this would look like:
\par 
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx1080\tx1440\tx3600\tx8820\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 #define Roman\tab 0
\par #define Helvetica\tab 1
\par 
\par void main()
\par \tab \{
\par \tab int font=Roman;\tab /* The global default */
\par \tab \tab \{
\par \tab \tab printf("The font number is %d\\n",font);
\par \tab \tab \}
\par \tab \tab \{
\par \tab \tab int font=Helvetica;\tab /* local setting */
\par \tab \tab printf("The font number is %d\\n",font);
\par \tab \tab \}
\par \tab \tab \{
\par \tab \tab printf("The font number is %d\\n",font);
\par \tab \tab \}
\par \tab \}
\par /*
\par  * Sample output:\tab The font number is 0
\par  *\tab \tab \tab \tab The font number is 1
\par  *\tab \tab \tab \tab The font number is 0
\par  */
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
An IFF file could contain:
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx1080\tx1440\tx5130\tx8820\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 LIST \{
\par \tab PROP TEXT \{
\par \tab \tab FONT \{TimesRoman\}\tab /* shared setting\tab */
\par \tab \tab \}
\par 
\par \tab FORM TEXT \{
\par \tab \tab FONT \{Helvetica\}\tab /* local setting\tab */
\par \tab \tab CHRS \{Hello \}\tab /* uses font Helvetica\tab */
\par \tab \tab \}
\par 
\par \tab FORM TEXT \{
\par \tab \tab CHRS \{there.\}\tab /* uses font TimesRoman\tab */
\par \tab \tab \}
\par \tab \}
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par 
\par The shared property assignments selectively override the reader's global defaults, but only
 for FORMs within the group.  A FORM's own property assignments selectively override the global and group-supplied values.  So when reading an IFF file, keep property settings on a stack.  They are designed to be small enough to hold in main memory.

\par 
\par Shared properties are semantically equivalent to copying those properties into each of the nested FORMs right after their FORM type IDs.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Properties for LIST
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Optional "properties for LIST" store the origin of the list's contents in a PROP chunk for the pseudo
 FORM type "LIST".  They are the properties originating program "OPGM", processor family "OCPU", computer type "OCMP", computer serial number or network address "OSN ", and user name "UNAM".  In our imperfect world, these could be called upon to distingui
sh between unintended variations of a data format or to work around bugs in particular originating/receiving program pairs.  Issue: Specify the format of these properties.
\par 
\par A creation date could also be stored in a property, but let's ask that file creating
, editing, and transporting programs maintain the correct date in the local file system.  Programs that move files between machine types are expected to copy across the creation dates.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 6.  Standard File Structure
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 File Structure Overview
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par An IFF file is just a single chunk of type FORM, LIST, or CAT.  Therefore an IFF file can be recognized by its first 4 bytes: "FORM", "LIST", or "CAT ".  Any file contents after the chunk's end are to be ignored.  (Some
\par file transfer programs add garbage to the end of transferred files.  This specification protects against such common damage).
\par 
\par 
\par The simplest IFF file would be one that does no more than encapsulate some binary data (perhaps even an old-fashioned single-purpose binary file).  Here is a binary dump of such a minimal IFF example:
\par 
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 0000: 464F524D 0000001A 534E4150 43524143    FORM....SNAPCRAC
\par 0010: 0000000D 68656C6C 6F2C776F 726C6421    ....hello,world!
\par 0020: 0A00                                   ..                    
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The first 4 bytes indicate this is a "FORM"; the most common IFF top level structure.  The following 4 bytes indicate that the contents totals 26 bytes.  The form type is listed as "SNAP".
\par 
\par Our form "SNAP" contains only one chunk at the moment; a chunk of type "CRAC".  From the size ($0000000D) the amount of data must be 13 bytes.  In this case, the data happens to correspond to the ASCII string "}{\rtlch\fcs1 \af8 \ltrch\fcs0 
\f5\fs20\insrsid12665142 hello, world!}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 <lf>".   Since the number 13 is odd, a zero pad byte is added to the file.  At any time new chunks could be added to form SNAP without affec
ting any other aspect of the file (other than the form size).  It's that simple.
\par 
\par 
\par Since an IFF file can be a group of objects, programs that read/write single objects can communicate to an extent with programs that read/write groups.  You're encouraged to write programs that handle all the objects in a LIST or CAT.  A graphics editor, 
for example, could process a list of pictures as a multiple page document, one page at a time.
\par 
\par Programs should enforce IFF's syntactic rules when reading and writing files. 
 Users should be told when a file is corrupt.  This ensures robust data transfer.  For minor damage, you may wish to give the user the option of using the suspect data, or cancelling.  Presumably a user could read in a damaged file, then save whatever was
 salvaged to a valid file.  The public domain IFF reader/writer subroutine package does some syntatic checks for you.  A utility program "IFFCheck" is available that scans an IFF file and checks it for conformance to IFF's syntactic rules.  IFFCheck also 
prints an outline of the chunks in the file, showing the }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckID}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  and }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{
\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  of each.  This is quite handy when building IFF programs.  Example programs are also available to show details of reading and writing IFF files.
\par 
\par A merge program "IFFJoin" will be available that logically appends IFF files into a single CAT group.  It "unwraps" each input file that is a CAT so that the combined file isn't nested CATs.
\par 
\par If we need to revise the IFF standard, the three anchoring IDs will be used as "version numbers".  That's why IDs "FOR1" through "FOR9", "LIS1" through "LIS9", and "CAT1" through "CAT9" are reserved.
\par 
\par IFF formats are designed for reasonable performance with floppy disks.  We achieve considerable simplicity in the formats and programs by relying on the host file system rather than defining universal grouping structures like directories for LIST contents
.  On huge storage systems, IFF files could be leaf nodes in a file structure like a B-tree.  Let's hope the host file system implements that for us!
\par 
\par 
\par There are two kinds of IFF files: single purpose files and scrap files.  They differ in the interpretation of multiple data objects and in the file's external type.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
Single Purpose Files
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A single purpose IFF file is for normal "document" and "archive" storage.  This is in contrast with "scrap files" (see below) and temporary backing storage (non-interchange files).
\par 
\par The external file type (or filename extension, depending on the host file system) indicates the file's contents.  It's generally the FORM type of the data contained, hence the restrictions on FORM type IDs.
\par 
\par Programmers and users may pick an "intended use" type as the filename extension to make it easy to filter for the relevant files in a filename requester.  This is actually a "subclass" or "subtype" that conveniently separates files of the same FORM type t
hat have different uses.  Programs cannot demand conformity to its expected subtypes without overly restricting data interchange since they cannot know about the subtypes to be used by future programs that users will want to exchange data with.
\par 
\par Issue: How to generate 3-letter MS-DOS extensions from 4-letter FORM type IDs?
\par 
\par Most single purpose files will be a single FORM (perhaps a composite FORM like a musical score containing nested FORMs like musical instrument descriptions).  If it's a LIST or a CAT, programs should skip over unrecognized objects to read the recognized o
nes or the first recognized one.  Then a program that can read a single purpose file can read something out of a "scrap file", too.
\par 
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Scrap Files}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  (not currently used)
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par A "scrap file" is for maximum interconnectivity in getting data between programs; the core of a clipboard function.  Scrap files may have type "IFF " or filename extension ".IFF".
\par 
\par A scrap file is typically a CAT containing alternate representations of the same basic information.  Include as many alternatives as you can readily generate.  This redundancy improves interconnectivity in situations where we can't make all programs read 
and write super-general formats.  [}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Inside}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Macintosh}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid12665142  chapter "Scrap Manager".] E.g. a graphically-annotated musical score might be supplemented by a stripped down 4-voice melody and by a text (the lyrics).
\par 
\par The originating program should write the alternate representations in order of "preference": most preferred (most comprehensive) type to least preferred (least comprehensive) type.  A receiving program should either use the first appearing type that it un
derstands or search for its own "preferred" type.
\par 
\par A scrap file should have at most }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 one}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  
alternative of any type.  (A LIST of same type objects is ok as one of the alternatives.) But don't count on this when reading; ignore extra sections of a type.  Then a program that reads scrap files can read something out of single purpose files.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
Rules for Reader Programs
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Here are some notes on building programs that read IFF files.  If you use the standard IFF reader module "IFFR.C", many of these rules and details will be automatically handled.  (See "Support Software" in Appendix A.) We recommend that
 you start from the example program "ShowILBM.C".  For LIST and PROP work, you should also read up on recursive descent parsers.  [See, for example, }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Compiler}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Construction}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 , }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 An}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Advanced}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 Course}{\rtlch\fcs1 \af51 \ltrch\fcs0 
\f51\fs20\insrsid12665142 .]
\par 
\par }\pard \ltrpar\ql \fi-260\li450\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin450\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 \bullet \tab 
The standard is very flexible so many programs can exchange data.  This implies a program has to scan the file and react to what's actually there in whatever order it appears.  An IFF reader program is a parser.
\par 
\par \bullet \tab For interchange to really work, programs must be willing to do some conversion during read-in.  If th
e data isn't exactly what you expect, say, the raster is smaller than those created by your program, then adjust it.  Similarly, your program could crop a large picture, add or drop bitplanes, or create/discard a mask plane.  The program should give up gr
acefully on data that it can't convert.
\par 
\par \bullet \tab If it doesn't start with "FORM", "LIST", or "CAT ", it's not an IFF-85 file.
\par 
\par \bullet \tab For any chunk you encounter, you must recognize its type ID to understand its contents.
\par 
\par \bullet \tab For any FORM chunk you encounter, you must recognize its FORM type ID to understand the contained "local chunks".  Even if you don't recognize the FORM type, you can still scan it for nested FORMs, LISTs, and CATs of interest.
\par 
\par \bullet \tab Don't forget to skip the implied pad byte after every odd-length chunk, this is }{\rtlch\fcs1 \af51 \ltrch\fcs0 \i\f51\fs20\insrsid12665142 not  }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 included in the chunk count!
\par 
\par \bullet \tab Chunk types LIST, FORM, PROP, and CAT are generic groups.  They always contain a subtype ID followed by chunks.
\par 
\par \bullet \tab Readers ought to handle a CAT of FORMs in a file.  You may treat the FORMs like document pages to sequence through, or just use the first FORM.
\par 
\par \bullet \tab Many  IFF readers completely skip LISTs.  "Fully IFF-conforming" readers are those that handle LISTs, even if just to read the first FORM from a file.  If you }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 do}{\rtlch\fcs1 \af51 
\ltrch\fcs0 \f51\fs20\insrsid12665142  look into a LIST, you }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\ul\insrsid12665142 must}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
 process shared properties (in PROP chunks) properly.  The idea is to get the correct data or none at all.
\par 
\par \bullet \tab The nicest readers are willing to look into unrecognized FORMs for nested FORM types that they do recognize.  For example, a musical score may contain nested in
strument descriptions and and animation or desktop publishing files may contain still pictures.   This extra step is highly recommended.
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Note to programmers: Processing PROP chunks is not simple! You'll need some background in interpreters with stack frames.  If this is foreign to you, build programs that read/write only one FORM per file.  For the more intrepid programmers, the next parag
raph summarizes how to process LISTs and PROPs.  See the general IFF reader module "IFFR.C" and the example program "ShowILBM.C" for details.
\par 
\par Allocate a stack frame for every LIST and FORM you encounter and initialize it by copying the stack frame of the parent LIST or FORM.  At the top level, you'll need a stack frame initialized to your program's global defaults.  While reading each LIST or F
ORM, store all encountered properties into the current stack frame.  In the example ShowILBM, each stack frame has a place for a bitmap header property ILBM.BMHD and a color map property ILBM.CMAP.  When you finally get to the ILBM's
 BODY chunk, use the property settings accumulated in the current stack frame.
\par 
\par An alternate implementation would just remember PROPs encountered, forgetting each on reaching the end of its scope (the end of the containing LIST).  When a FORM XXXX is encountered, scan the chunks in all remembered PROPs XXXX, in order, as if they appe
ared before the chunks actually in the FORM XXXX.  This gets trickier if you read FORMs inside of FORMs.
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 
Rules for Writer Programs
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 Here are some notes on building programs tha
t write IFF files, which is much easier than reading them.  If you use the standard IFF writer module "IFFW.C" , many of these rules and details will automatically be enforced.  See the example program "Raw2ILBM.C".
\par 
\par }\pard \ltrpar\ql \fi-260\li450\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin450\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 \bullet \tab 
An IFF file is a single FORM, LIST, or CAT chunk.
\par 
\par \bullet \tab Any IFF-85 file must start with the 4 characters "FORM", "LIST", or "CAT ", followed by a LONG }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 ckSize}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
.  There should be no data after the chunk end.
\par 
\par \bullet \tab Chunk types LIST, FORM, PROP, and CAT are generic.  They always contain a subtype ID followed by chunks.  These three IDs are universally reserved, as are "LIS1" through "LIS9", "FOR1" through "FOR9", "CAT1" through "CAT9", and "}{
\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142     }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 ".
\par 
\par \bullet \tab Don't forget to write a 0 pad byte after each odd-length chunk.
\par 
\par \bullet \tab 
Do not try to edit a file that you don't know how to create.  Programs may look into a file and copy out nested FORMs of types that they recognize, but they should not edit and replace the nested FORMs and not add or remove them.  Breaking these rules c
ould make the containing structure inconsistent.  You may write a new file containing items you copied, or copied and modified, but don't copy structural parts you don't understand.
\par 
\par \bullet \tab You must adhere to the syntax descriptions in Appendix A.  E.g. PROPs may only appear inside LISTs.
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par There are at least four common techniques for writing an IFF group:
\par 
\par }\pard \ltrpar\ql \li1260\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1260\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 (1)  build the data in a file mapped into virtual memory.

\par (2)  build the data in memory blocks and use block I/O.
\par (3)  stream write the data piecemeal and (don't forget!) random access back to set the group (or FORM) length count.
\par (4)  make a preliminary pass to compute the length count then stream write the data.
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Issue: The standard disallows "blind" chunk copying for consistency reasons.  Perhaps we can define a ckID convention for chunks that are ok to replicate without knowledge of the contents.  Any such chunks would need to be internally consistent, and not b
e bothered by changed external references.
\par 
\par Issue: Stream-writing an IFF FORM can be inconvenient.  With random access files one can write
 all the chunks then go back to fix up the FORM size.  With stream access, the FORM size must be calculated before the file is written.  When compression is involved, this can be slow or inconvenient.  Perhaps we can define an "END " chunk.  The stream wr
iter would use -1 ($FFFFFFFF) as the FORM size.  The reader would follow each chunk, when the reader reaches an "END ", it would terminate the last -1 sized chunk.  Certain new IFF FORMs could require that readers understand "END ".
\par 
\par 
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 7.  Standards Committee
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The following people contributed to the design of this IFF standard:
\par 
\par }\pard \ltrpar\ql \li540\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin540\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 Bob "Kodiak" Burns, Commodore-Amiga
\par R. J. Mical, Commodore-Amiga
\par Jerry Morrison, Electronic Arts
\par Greg Riker, Electronic Arts
\par Steve Shaw, Electronic Arts
\par Barry Walsh, Commodore-Amiga
\par Oct, 1988 revision by Bryce Nesbitt, and Carolyn Scheppner, Commodore-Amiga
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 \page }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\insrsid12665142 
Appendix A.  Reference
\par }{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Type Definitions
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx7200\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par The following C typedefs describe standard IFF structures.  Declarations to use in practice will vary with the CPU and compiler.  For exam
ple, 68000 Lattice C produces efficient comparison code if we define ID as a "LONG".  A macro "MakeID" builds these IDs at compile time.
\par 
\par }\pard \ltrpar\ql \fi-260\li810\ri580\nowidctlpar\tx1530\tx4590\tx8190\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin810\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 
/* Standard IFF types, expressed in 68000 Lattice C.\tab */
\par 
\par typedef unsigned char UBYTE;\tab /*  8 bits unsigned\tab */
\par typedef short WORD;\tab /* 16 bits signed\tab */
\par typedef unsigned short UWORD;\tab /* 16 bits unsigned\tab */
\par typedef long LONG;\tab /* 32 bits signed\tab */
\par 
\par typedef char ID[4];\tab /* 4 chars in ' ' through '~'\tab */
\par 
\par typedef struct \{
\par \tab ID\tab ckID;
\par \tab LONG\tab ckSize;\tab /* sizeof(ckData)\tab */
\par \tab UBYTE\tab ckData[/* ckSize */];
\par \tab \} Chunk;
\par 
\par /* ID typedef and builder for 68000 Lattice C. */
\par typedef LONG ID; \tab /* 4 chars in ' ' through '~'\tab */
\par #define MakeID(a,b,c,d) ( (a)<<24 | (b)<<16 | (c)<<8 | (d) )
\par 
\par /* Globally reserved IDs. */
\par #define ID_FORM   MakeID('F','O','R','M')
\par #define ID_LIST   MakeID('L','I','S','T')
\par #define ID_PROP   MakeID('P','R','O','P')
\par #define ID_CAT    MakeID('C','A','T',' ')
\par #define ID_FILLER MakeID(' ',' ',' ',' ')
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Syntax Definitions
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Here's a collection of the syntax definitions in this document.
\par 
\par }\pard \ltrpar\ql \fi-1620\li2160\ri580\nowidctlpar\tx4590\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin2160\itap0\pararsid15337289 {\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 Chunk\tab ::= ID #\{ UBYTE* \} [0]
\par 
\par Property\tab ::= Chunk
\par 
\par FORM\tab ::= "FORM" #\{ FormType (LocalChunk | FORM | LIST | CAT)* \}
\par FormType\tab ::= ID
\par LocalChunk\tab ::= Property | Chunk
\par 
\par CAT\tab ::= "CAT " #\{ ContentsType (FORM | LIST | CAT)* \}
\par ContentsType\tab ::= ID\tab -- }{\rtlch\fcs1 \af8 \ltrch\fcs0 \i\f5\fs20\insrsid12665142 a hint or an "abstract data type" ID
\par }{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 
\par LIST\tab ::= "LIST" #\{ ContentsType PROP* (FORM | LIST | CAT)* \}
\par PROP\tab ::= "PROP" #\{ FormType Property* \}
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par In this extended regular expression notation, the token "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 #}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 " represents a count of the following \{braced\} data bytes.  Literal item
s are shown in "quotes", [square bracketed items] are optional, and "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 *}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 " means 0 or more instances.  A sometimes-needed pad byte is shown as "
}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 [0]}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 ".
\par 
\par }\pard \ltrpar\qc \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \b\f51\fs20\insrsid12665142 Example Diagrams
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par Here's a box diagram for an example IFF file, a raster image FORM ILBM.  This FORM contains a bitmap header property chunk BMHD, a color map property chunk CMAP, and a raster data chunk BODY.  This particular raster is 320 x 200 pixels x 3 bit planes unco
mpressed.  The "}{\rtlch\fcs1 \af8 \ltrch\fcs0 \f5\fs20\insrsid12665142 0}{\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 " after the CMAP chunk represents a zero pad byte; included since the CMAP
 chunk has an odd length.  The text to the right of the diagram shows the outline that would be printed by the IFFCheck utility program for this particular file.
\par 
\par }\pard \ltrpar\ql \li1440\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1440\itap0\pararsid15337289 {\pard\plain \ltrpar
\ql \li1440\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1440\itap0\pararsid15337289 \rtlch\fcs1 \af51\afs20\alang1025 \ltrch\fcs0 \f51\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033\insrsid15337289 {\object\objemb
\objw7301\objh3480\objscalex98\objscaley96{\*\objclass Word.Picture.8}{\*\objdata 01050000020000000f000000576f72642e506963747572652e3800000000000000000000140000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff08000000feffffff04000000050000000600000007000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff020000000709020000000000c000000000000046000000000000000000000000e0e6
34ac75dace01030000000009000000000000030050004900430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
000000000000000000000000640000000000000003004d004500540041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0002010100000003000000ffffffff0000000000000000000000000000000000000000000000000000
0000000000000000000002000000d603000000000000030050004900430054000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000201ffffffff04000000ffffffff000000000000000000000000000000000000000000000000
00000000000000000000000012000000020400000000000001000000feffffff030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f0000001000000011000000feffffff130000001400000015000000160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff640002000100000000000800b9250000fc110000841c0000980d000000000000000000000000000000000000d5030000c103000000000000000000000000000000000000000000ff00000000000000ff00000000000000ff000000000000
00ff00000000000000000000000000000000000000000000000000000000000000000800b925fc110000010009000003e701000007001c0000000000050000000b0207000700050000000c02ae006d010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102
ffffff00030000001e0007000000fc020000000000000000040000002d01000008000000fa0205000100000000000000040000002d0101000b0000001a085700fcff57004c00bc002e00a8001a000b0000001a0877004c007700fcff26002e0012001a0008000000fa0206000100000000000000040000002d0102000500
0000140224002300050000001302aa0023001c000000fb02f6ff00000000000090010000000000000030436f757269657200de1e0a3e8077cb080ce12300d894487680014c76b91d6607040000002d0103000c00000021050c002e424f445920203234303030970007010b000000210509002e434d415020203231006400
07010b000000210509002e424d484420203230003a0007010f00000021051100464f524d202032343037302020494c424d001600070107000000210501003001880035000b00000021050900302c20302c2030208500a9003b0008000000fa0206000200000000000000040000002d0104000500000014029d0034000500
000013029d00ee00090000002105050032343030302097009200090000002105060091424f44599297003b0007000000fc020100000000000000040000002d010500070000001b04b000ef008a0033001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c203020850076003b0005000000
14026a0034000500000013026a00ee000700000021050200323164009200090000002105060091434d41509264003b00070000001b047d00ef00570033001400000021051c003332302c203230302c20302c20302c20332c20302c20302c203020854c003b00050000001402400034000500000013024000ee0007000000
2105020032303a009200090000002105060091424d4844923a003b00070000001b045300ef002d003300090000002105060091494c424d92280035000500000014021c002e000500000013021c00f400090000002105050032343037309216009200090000002105060091464f524d921600350007000000fc020000ffff
ff000000040000002d010600040000002d01010004000000f00104000e000000240305000a005e002d005e002d006a000a006a000a005e00090000002105050032343037309267000b00040000002d01050008000000fa0206000200000000000000040000002d010400070000001b04b300f50009002d00040000002701
ffff03000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004020007000700b501741101a00082a000ac01000a0007000700b501746100a8001a00bc002effe80030610012001a0026002e009c0030200024002300aa0023a000ada10096000605000000
02bca1009a0008fffd000000260000a000980300160d000a28009701070c2e424f445920203234303030a00099a00097a1009600060500000002bca1009a0008fffd0000001f0000a000982800640107092e434d415020203231a00099a00097a1009600060500000002bca1009a0008fffd0000001d0000a0009828003a
0107092e424d484420203230a00099a00097a1009600060500000002bca1009a0008fffd000000350000a00098280016010711464f524d202032343037302020494c424da00099a00097a1009600060500000002bca1009a0008fffd000000060000a0009828008800350130a00099a00097a1009600060500000002bca1
009a0008fffd0000001d0000a000982b062109302c20302c203020c9a00099a00097070002000220009c0033009c00eda1009600060500000002bca1009a0008fffd000000110000a000982800970092053234303030a00099a00097a1009600060500000002bca1009a0008fffd000000140000a00098280097003b06d4
424f4459d5a00099a0009730008a003300b000efa1009600060500000002bca1009a0008fffd000000590000a00098280076003b1d302c20302c20303b2033322c20302c20303b2036342c20302c203020c9a00099a000972000690033006900eda1009600060500000002bca1009a0008fffd000000080000a000982800
640092023231a00099a00097a1009600060500000002bca1009a0008fffd000000140000a00098280064003b06d4434d4150d5a00099a000973000570033007d00efa1009600060500000002bca1009a0008fffd000000560000a0009828004c003b1c3332302c203230302c20302c20302c20332c20302c20302c203020
c9a00099a0009720003f0033003f00eda1009600060500000002bca1009a0008fffd000000080000a0009828003a0092023230a00099a00097a1009600060500000002bca1009a0008fffd000000140000a0009828003a003b06d4424d4844d5a00099a0009730002d0033005300efa1009600060500000002bca1009a00
08fffd000000140000a00098280028003506d4494c424dd5a00099a0009720001b002d001b00f3a1009600060500000002bca1009a0008fffd000000110000a000982800160092053234303730a00099a00097a1009600060500000002bca1009a0008fffd000000140000a00098280016003506d4464f524dd5a00099a0
0097a1009600060500000002bc32005e000a006a002da1009a0008fffd000000110000a00098280067000b053234303730a00099a00097300009002d00b300f5a00083ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000200030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003004f0062006a0049006e0066006f000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000012000200ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000023000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000050000000d0000004d45544146494c455049435400b925000004eeffffd60300000800b925fc110000
010009000003e701000007001c0000000000050000000b0207000700050000000c02ae006d010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e0007000000fc020000000000000000040000002d01000008000000fa0205000100
000000000000040000002d0101000b0000001a085700fcff57004c00bc002e00a8001a000b0000001a0877004c007700fcff26002e0012001a0008000000fa0206000100000000000000040000002d01020005000000140224002300050000001302aa0023001c000000fb02f6ff00000000000090010000000000000030
436f757269657200de1e0a3e8077cb080ce12300d894487680014c76b91d6607040000002d0103000c00000021050c002e424f445920203234303030970007010b000000210509002e434d41502020323100640007010b000000210509002e424d484420203230003a0007010f00000021051100464f524d202032343037
302020494c424d001600070107000000210501003001880035000b00000021050900302c20302c2030208500a9003b0008000000fa0206000200000000000000040000002d0104000500000014029d0034000500000013029d00ee00090000002105050032343030302097009200090000002105060091424f4459929700
3b0007000000fc020100000000000000040000002d010500070000001b04b000ef008a0033001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c203020850076003b000500000014026a0034000500000013026a00ee000700000021050200323164009200090000002105060091434d41
509264003b00070000001b047d00ef00570033001400000021051c003332302c203230302c20302c20302c20332c20302c20302c203020854c003b00050000001402400034000500000013024000ee00070000002105020032303a009200090000002105060091424d4844923a003b00070000001b045300ef002d003300
090000002105060091494c424d92280035000500000014021c002e000500000013021c00f400090000002105050032343037309216009200090000002105060091464f524d921600350007000000fc020000ffffff000000040000002d010600040000002d01010004000000f00104000e000000240305000a005e002d00
5e002d006a000a006a000a005e00090000002105050032343037309267000b00040000002d01050008000000fa0206000200000000000000040000002d010400070000001b04b300f50009002d00040000002701ffff030000000000}{\result {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid15337289 
{\pict\wmetafile8\picw9657\pich4604\picwgoal7300\pichgoal3480 \picscalex98\picscaley96 
010009000003e701000007001c0000000000050000000b0207000700050000000c02ae006d010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e0007000000fc020000000000000000040000002d01000008000000fa020500010000
0000000000040000002d0101000b0000001a085700fcff57004c00bc002e00a8001a000b0000001a0877004c007700fcff26002e0012001a0008000000fa0206000100000000000000040000002d01020005000000140224002300050000001302aa0023001c000000fb02f6ff00000000000090010000000000000030436f
757269657200de1e0a3e8077cb080ce12300d894487680014c76b91d6607040000002d0103000c00000021050c002e424f445920203234303030970007010b000000210509002e434d41502020323100640007010b000000210509002e424d484420203230003a0007010f00000021051100464f524d202032343037302020
494c424d001600070107000000210501003001880035000b00000021050900302c20302c2030208500a9003b0008000000fa0206000200000000000000040000002d0104000500000014029d0034000500000013029d00ee00090000002105050032343030302097009200090000002105060091424f44599297003b000700
0000fc020100000000000000040000002d010500070000001b04b000ef008a0033001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c203020850076003b000500000014026a0034000500000013026a00ee000700000021050200323164009200090000002105060091434d41509264003b
00070000001b047d00ef00570033001400000021051c003332302c203230302c20302c20302c20332c20302c20302c203020854c003b00050000001402400034000500000013024000ee00070000002105020032303a009200090000002105060091424d4844923a003b00070000001b045300ef002d003300090000002105
060091494c424d92280035000500000014021c002e000500000013021c00f400090000002105050032343037309216009200090000002105060091464f524d921600350007000000fc020000ffffff000000040000002d010600040000002d01010004000000f00104000e000000240305000a005e002d005e002d006a000a
006a000a005e00090000002105050032343037309267000b00040000002d01050008000000fa0206000200000000000000040000002d010400070000001b04b300f50009002d00040000002701ffff030000000000}}}}}\sectd \ltrsect\linex0\linestarts65536\endnhere\sectdefaultcl\sftnbj {
\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 
\par }\pard \ltrpar\ql \li180\ri580\nowidctlpar\tx1620\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin180\itap0\pararsid15337289 {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid12665142 
\par This second diagram shows a LIST of two FORMs ILBM sharing a common BMHD property and a common CMAP property.  Again, the text on the right is an outline \'e1 la IFFCheck.
\par 
\par }\pard \ltrpar\ql \li1960\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1960\itap0\pararsid15337289 {\pard\plain \ltrpar
\ql \li1960\ri580\nowidctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin580\lin1960\itap0\pararsid15337289 \rtlch\fcs1 \af51\afs20\alang1025 \ltrch\fcs0 \f51\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033\insrsid15337289 {\object\objemb
\objw6941\objh6781\objscalex96\objscaley96{\*\objclass Word.Picture.8}{\*\objdata 01050000020000000f000000576f72642e506963747572652e3800000000000000000000180000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff09000000feffffff04000000050000000600000007000000080000000a000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff020000000709020000000000c000000000000046000000000000000000000000f00d
35ac75dace0103000000400c000000000000030050004900430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
000000000000000000000000640000000000000003004d004500540041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0002010100000003000000ffffffff0000000000000000000000000000000000000000000000000000
0000000000000000000002000000b004000000000000030050004900430054000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000201ffffffff04000000ffffffff000000000000000000000000000000000000000000000000
00000000000000000000000015000000bb0600000000000001000000feffffff030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f0000001000000011000000120000001300000014000000feffffff160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000230000002400000025000000260000002700000028000000290000002a0000002b0000002c0000002d0000002e0000002f000000fefffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff640002000100000000000800dd230000092300001c1b00007c1a000000000000000000000000000000000000c0030000c003000000000000000000000000000000000000000000ff00000000000000ff00000000000000ff000000000000
00ff00000000000000000000000000000000000000000000000000000000000000000800dd23092300000100090000035402000003001c0000000000050000000b0207000700050000000c0253015b010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102
ffffff00030000001e0007000000fc020100000000000000040000002d01000008000000fa0206000200000000000000040000002d010100070000001b040401d700b7000f001c000000fb02f6ff00000000000090010000000000000030436f757269657200d11e0a038077cb080ce12300d894487680014c76591e6674
040000002d010200090000002105060091464f524d92c50017000900000021050500323430313292c4007400050000001402ca001000050000001302ca00d600090000002105060091494c424d92d6001700070000001b040101d100db001500090000002105060091424f445992e8001d00090000002105050032343030
3092e8007400050000001402ee001600050000001302ee00d0000b00000021050900302c20302c2030208500fa001d00070000001b04b300d7002d000f0009000000210506009150524f50923b001700070000002105020036323a007400050000001402400010000500000013024000d600090000002105060091494c42
4d924c001700070000001b047700d10051001500090000002105060091424d4844925e001d00070000002105020032305e007400050000001402640016000500000013026400d0001400000021051c003332302c203230302c20302c20302c20332c20302c20302c2030208570001d00070000001b04a100d1007b001500
090000002105060091434d41509288001d0007000000210502003231880074000500000014028e0016000500000013028e00d0001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c20302085009a001d0007000000210501003031ac001700070000001b045801dd000900090009000000
21050500343831313492160074000500000014021c000a000500000013021c00dc00090000002105060091414141419228001100070000001b045501d70008010f00090000002105060091464f524d92160117000900000021050500323430313292150174000500000014021b0110000500000013021b01d60009000000
2105060091494c424d9227011700070000001b045201d1002c011500090000002105060091424f44599239011d000900000021050500323430303092390174000500000014023f0116000500000013023f01d0000b00000021050900302c20302c20302085004b011d000900000021050600914c49535492160011000f00
0000210512002e464f524d202032343031322020494c424dc400ef000b00000021050a002e2e424d4844202032305e00ef000b00000021050a002e2e434d4150202032318800ef000d00000021050d002e2e424f44592020323430303020e800ef000f000000210511004c49535420203438313134202041414141001600
ef000e00000021050f002e50524f50202036322020494c424d413a00ef000f000000210512002e464f524d202032343031322020494c424d1501ef000d00000021050d002e2e424f445920203234303030203901ef00040000002701ffff0300000000000000000000000000000000000000000006bb00070007015a0162
1101a0008201000a00070007015a016207000200023000b7000f010400d7a10096000605000000024aa1009a0008fffd000000140000a000980300160d000a2b17c506d4464f524dd5a00099a00097a10096000605000000024aa1009a0008fffd000000110000a000982800c40074053234303132a00099a000972000c9
000f00c900d5a10096000605000000024aa1009a0008fffd000000140000a000982800d6001706d4494c424dd5a00099a000973000db0015010100d1a10096000605000000024aa1009a0008fffd000000140000a000982b061206d4424f4459d5a00099a00097a10096000605000000024aa1009a0008fffd0000001100
00a000982957053234303030a00099a000972000ed001500ed00cfa10096000605000000024aa1009a0008fffd0000001d0000a000982800fa001d09302c20302c203020c9a00099a0009730002d000f00b300d7a10096000605000000024aa1009a0008fffd000000140000a0009828003b001706d450524f50d5a00099
a00097a10096000605000000024aa1009a0008fffd000000080000a0009828003a0074023632a00099a0009720003f000f003f00d5a10096000605000000024aa1009a0008fffd000000140000a0009828004c001706d4494c424dd5a00099a000973000510015007700d1a10096000605000000024aa1009a0008fffd00
0000140000a000982b061206d4424d4844d5a00099a00097a10096000605000000024aa1009a0008fffd000000080000a000982957023230a00099a000972000630015006300cfa10096000605000000024aa1009a0008fffd000000560000a00098280070001d1c3332302c203230302c20302c20302c20332c20302c20
302c203020c9a00099a0009730007b001500a100d1a10096000605000000024aa1009a0008fffd000000140000a000982a1806d4434d4150d5a00099a00097a10096000605000000024aa1009a0008fffd000000080000a000982957023231a00099a0009720008d0015008d00cfa10096000605000000024aa1009a0008
fffd000000590000a0009828009a001d1d302c20302c20303b2033322c20302c20303b2036342c20302c203020c9a00099a00097a10096000605000000024aa1009a0008fffd000000060000a000982800ac00170130a00099a000973000090009015800dda10096000605000000024aa1009a0008fffd000000110000a0
00982800160074053438313134a00099a0009720001b0009001b00dba10096000605000000024aa1009a0008fffd000000140000a00098280028001106d441414141d5a00099a00097300108000f015500d7a10096000605000000024aa1009a0008fffd000000140000a000982b06ee06d4464f524dd5a00099a00097a1
0096000605000000024aa1009a0008fffd000000110000a000982801150074053234303132a00099a0009720011a000f011a00d5a10096000605000000024aa1009a0008fffd000000140000a00098280127001706d4494c424dd5a00099a0009730012c0015015200d1a10096000605000000024aa1009a0008fffd0000
00140000a000982b061206d4424f4459d5a00099a00097a10096000605000000024aa1009a0008fffd000000110000a000982957053234303030a00099a0009720013e0015013e00cfa10096000605000000024aa1009a0008fffd0000001d0000a0009828014b001d09302c20302c203020c9a00099a00097a100960006
05000000024aa1009a0008fffd000000140000a00098280016001106d44c495354d5a00099a00097a10096000605000000024aa1009a0008fffd000000380000a000982bdeae122e464f524d202032343031322020494c424da00099a00097a10096000605000000024aa1009a0008fffd000000200000a0009828005e00
ef0a2e2e424d484420203230a00099a00097a10096000605000000024aa1009a0008fffd000000200000a000982a2a0a2e2e434d415020203231a00099a00097a10096000605000000024aa1009a0008fffd000000290000a000982a600d2e2e424f445920203234303030a00099a00097a10096000605000000024aa100
9a0008fffd000000350000a0009828001600ef114c49535420203438313134202041414141a00099a00097a10096000605000000024aa1009a0008fffd0000002f0000a000982a240f2e50524f50202036322020494c424da00099a00097a10096000605000000024aa1009a0008fffd000000380000a000982adb122e46
4f524d202032343031322020494c424da00099a00097a10096000605000000024aa1009a0008fffd000000290000a000982a240d2e2e424f445920203234303030a00099a00097a00083ff000000000003004f0062006a0049006e0066006f00000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000012000200ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000003000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200030000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000050000000d0000004d45544146494c455049435400dd230000
f7dcffffb00400000800dd2309230000
0100090000035402000003001c0000000000050000000b0207000700050000000c0253015b010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e0007000000fc020100000000000000040000002d01000008000000fa0206000200
000000000000040000002d010100070000001b040401d700b7000f001c000000fb02f6ff00000000000090010000000000000030436f757269657200d11e0a038077cb080ce12300d894487680014c76591e6674040000002d010200090000002105060091464f524d92c50017000900000021050500323430313292c400
7400050000001402ca001000050000001302ca00d600090000002105060091494c424d92d6001700070000001b040101d100db001500090000002105060091424f445992e8001d000900000021050500323430303092e8007400050000001402ee001600050000001302ee00d0000b00000021050900302c20302c203020
8500fa001d00070000001b04b300d7002d000f0009000000210506009150524f50923b001700070000002105020036323a007400050000001402400010000500000013024000d600090000002105060091494c424d924c001700070000001b047700d10051001500090000002105060091424d4844925e001d0007000000
2105020032305e007400050000001402640016000500000013026400d0001400000021051c003332302c203230302c20302c20302c20332c20302c20302c2030208570001d00070000001b04a100d1007b001500090000002105060091434d41509288001d0007000000210502003231880074000500000014028e001600
0500000013028e00d0001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c20302085009a001d0007000000210501003031ac001700070000001b045801dd00090009000900000021050500343831313492160074000500000014021c000a000500000013021c00dc000900000021050600
91414141419228001100070000001b045501d70008010f00090000002105060091464f524d92160117000900000021050500323430313292150174000500000014021b0110000500000013021b01d600090000002105060091494c424d9227011700070000001b045201d1002c011500090000002105060091424f445992
39011d000900000021050500323430303092390174000500000014023f0116000500000013023f01d0000b00000021050900302c20302c20302085004b011d000900000021050600914c49535492160011000f000000210512002e464f524d202032343031322020494c424dc400ef000b00000021050a002e2e424d4844
202032305e00ef000b00000021050a002e2e434d4150202032318800ef000d00000021050d002e2e424f44592020323430303020e800ef000f000000210511004c49535420203438313134202041414141001600ef000e00000021050f002e50524f50202036322020494c424d413a00ef000f000000210512002e464f52
4d202032343031322020494c424d1501ef000d00000021050d002e2e424f445920203234303030203901ef00040000002701ffff030000000000}{\result {\rtlch\fcs1 \af51 \ltrch\fcs0 \f51\fs20\insrsid15337289 {\pict\wmetafile8\picw9181\pich8969\picwgoal6940\pichgoal6780 
\picscalex96\picscaley96 
0100090000035402000003001c0000000000050000000b0207000700050000000c0253015b010500000004010d000000050000002e01180000000500000002010100000005000000090200000000050000000102ffffff00030000001e0007000000fc020100000000000000040000002d01000008000000fa020600020000
0000000000040000002d010100070000001b040401d700b7000f001c000000fb02f6ff00000000000090010000000000000030436f757269657200d11e0a038077cb080ce12300d894487680014c76591e6674040000002d010200090000002105060091464f524d92c50017000900000021050500323430313292c4007400
050000001402ca001000050000001302ca00d600090000002105060091494c424d92d6001700070000001b040101d100db001500090000002105060091424f445992e8001d000900000021050500323430303092e8007400050000001402ee001600050000001302ee00d0000b00000021050900302c20302c2030208500fa
001d00070000001b04b300d7002d000f0009000000210506009150524f50923b001700070000002105020036323a007400050000001402400010000500000013024000d600090000002105060091494c424d924c001700070000001b047700d10051001500090000002105060091424d4844925e001d000700000021050200
32305e007400050000001402640016000500000013026400d0001400000021051c003332302c203230302c20302c20302c20332c20302c20302c2030208570001d00070000001b04a100d1007b001500090000002105060091434d41509288001d0007000000210502003231880074000500000014028e0016000500000013
028e00d0001500000021051d00302c20302c20303b2033322c20302c20303b2036342c20302c20302085009a001d0007000000210501003031ac001700070000001b045801dd00090009000900000021050500343831313492160074000500000014021c000a000500000013021c00dc000900000021050600914141414192
28001100070000001b045501d70008010f00090000002105060091464f524d92160117000900000021050500323430313292150174000500000014021b0110000500000013021b01d600090000002105060091494c424d9227011700070000001b045201d1002c011500090000002105060091424f44599239011d00090000
0021050500323430303092390174000500000014023f0116000500000013023f01d0000b00000021050900302c20302c20302085004b011d000900000021050600914c49535492160011000f000000210512002e464f524d202032343031322020494c424dc400ef000b00000021050a002e2e424d4844202032305e00ef00
0b00000021050a002e2e434d4150202032318800ef000d00000021050d002e2e424f44592020323430303020e800ef000f000000210511004c49535420203438313134202041414141001600ef000e00000021050f002e50524f50202036322020494c424d413a00ef000f000000210512002e464f524d2020323430313220
20494c424d1501ef000d00000021050d002e2e424f445920203234303030203901ef00040000002701ffff030000000000}}}}}\sectd \ltrsect\linex0\linestarts65536\endnhere\sectdefaultcl\sftnbj {\rtlch\fcs1 \af8 \ltrch\fcs0 \f40\insrsid12665142 
\par }{\*\themedata 504b030414000600080000002100828abc13fa0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb6ac3301045f785fe83d0b6d8
72ba28a5d8cea249777d2cd20f18e4b12d6a8f843409c9df77ecb850ba082d74231062ce997b55ae8fe3a00e1893f354e9555e6885647de3a8abf4fbee29bbd7
2a3150038327acf409935ed7d757e5ee14302999a654e99e393c18936c8f23a4dc072479697d1c81e51a3b13c07e4087e6b628ee8cf5c4489cf1c4d075f92a0b
44d7a07a83c82f308ac7b0a0f0fbf90c2480980b58abc733615aa2d210c2e02cb04430076a7ee833dfb6ce62e3ed7e14693e8317d8cd0433bf5c60f53fea2fe7
065bd80facb647e9e25c7fc421fd2ddb526b2e9373fed4bb902e182e97b7b461e6bfad3f010000ffff0300504b030414000600080000002100a5d6a7e7c00000
00360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4fc7060abb08
84a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b63095120f88d94fbc
52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462a1a82fe353
bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f7468656d652f7468
656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b4b0d592c9c
070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b4757e8d3f7
29e245eb2b260a0238fd010000ffff0300504b03041400060008000000210096b5ade296060000501b0000160000007468656d652f7468656d652f7468656d65
312e786d6cec594f6fdb3614bf0fd87720746f6327761a07758ad8b19b2d4d1bc46e871e698996d850a240d2497d1bdae38001c3ba618715d86d87615b8116d8
a5fb34d93a6c1dd0afb0475292c5585e9236d88aad3e2412f9e3fbff1e1fa9abd7eec70c1d1221294fda5efd72cd4324f1794093b0eddd1ef62fad79482a9c04
98f184b4bd2991deb58df7dfbb8ad755446282607d22d771db8b944ad79796a40fc3585ee62949606ecc458c15bc8a702910f808e8c66c69b9565b5d8a314d3c
94e018c8de1a8fa94fd05093f43672e23d06af89927ac06762a049136785c10607758d9053d965021d62d6f6804fc08f86e4bef210c352c144dbab999fb7b471
7509af678b985ab0b6b4ae6f7ed9ba6c4170b06c788a705430adf71bad2b5b057d03606a1ed7ebf5babd7a41cf00b0ef83a6569632cd467faddec9699640f671
9e76b7d6ac355c7c89feca9cccad4ea7d36c65b258a206641f1b73f8b5da6a6373d9c11b90c537e7f08dce66b7bbeae00dc8e257e7f0fd2badd5868b37a088d1
e4600ead1ddaef67d40bc898b3ed4af81ac0d76a197c86826828a24bb318f3442d8ab518dfe3a20f000d6458d104a9694ac6d88728eee2782428d60cf03ac1a5
193be4cbb921cd0b495fd054b5bd0f530c1931a3f7eaf9f7af9e3f45c70f9e1d3ff8e9f8e1c3e3073f5a42ceaa6d9c84e5552fbffdeccfc71fa33f9e7ef3f2d1
17d57859c6fffac327bffcfc793510d26726ce8b2f9ffcf6ecc98baf3efdfdbb4715f04d814765f890c644a29be408edf3181433567125272371be15c308d3f2
8acd249438c19a4b05fd9e8a1cf4cd296699771c393ac4b5e01d01e5a30a787d72cf1178108989a2159c77a2d801ee72ce3a5c545a6147f32a99793849c26ae6
6252c6ed637c58c5bb8b13c7bfbd490a75330f4b47f16e441c31f7184e140e494214d273fc80900aedee52ead87597fa824b3e56e82e451d4c2b4d32a423279a
668bb6690c7e9956e90cfe766cb37b077538abd27a8b1cba48c80acc2a841f12e698f13a9e281c57911ce298950d7e03aba84ac8c154f8655c4f2af074481847
bd804859b5e696007d4b4edfc150b12addbecba6b18b148a1e54d1bc81392f23b7f84137c2715a851dd0242a633f900710a218ed715505dfe56e86e877f0034e
16bafb0e258ebb4faf06b769e888340b103d3311da9750aa9d0a1cd3e4efca31a3508f6d0c5c5c398602f8e2ebc71591f5b616e24dd893aa3261fb44f95d843b
5974bb5c04f4edafb95b7892ec1108f3f98de75dc97d5772bdff7cc95d94cf672db4b3da0a6557f70db629362d72bcb0431e53c6066acac80d699a6409fb44d0
8741bdce9c0e4971624a2378cceaba830b05366b90e0ea23aaa241845368b0eb9e2612ca8c742851ca251ceccc70256d8d87265dd96361531f186c3d9058edf2
c00eafe8e1fc5c509031bb4d680e9f39a3154de0accc56ae644441edd76156d7429d995bdd88664a9dc3ad50197c38af1a0c16d684060441db02565e85f3b966
0d0713cc48a0ed6ef7dedc2dc60b17e92219e180643ed27acffba86e9c94c78ab90980d8a9f0913ee49d62b512b79626fb06dccee2a432bbc60276b9f7dec44b
7904cfbca4f3f6443ab2a49c9c2c41476dafd55c6e7ac8c769db1bc399161ee314bc2e75cf8759081743be1236ec4f4d6693e5336fb672c5dc24a8c33585b5fb
9cc24e1d4885545b58463634cc5416022cd19cacfccb4d30eb45296023fd35a458598360f8d7a4003bbaae25e331f155d9d9a5116d3bfb9a95523e51440ca2e0
088dd844ec6370bf0e55d027a012ae264c45d02f708fa6ad6da6dce29c255df9f6cae0ec38666984b372ab5334cf640b37795cc860de4ae2816e95b21be5ceaf
8a49f90b52a51cc6ff3355f47e0237052b81f6800fd7b802239daf6d8f0b1571a8426944fdbe80c6c1d40e8816b88b8569082ab84c36ff0539d4ff6dce591a26
ade1c0a7f669880485fd484582903d284b26fa4e2156cff62e4b9265844c4495c495a9157b440e091bea1ab8aaf7760f4510eaa69a6465c0e04ec69ffb9e65d0
28d44d4e39df9c1a52ecbd3607fee9cec7263328e5d661d3d0e4f62f44acd855ed7ab33cdf7bcb8ae889599bd5c8b3029895b6825696f6af29c239b75a5bb1e6
345e6ee6c28117e73586c1a2214ae1be07e93fb0ff51e133fb65426fa843be0fb515c187064d0cc206a2fa926d3c902e907670048d931db4c1a44959d366ad93
b65abe595f70a75bf03d616c2dd959fc7d4e6317cd99cbcec9c58b34766661c7d6766ca1a9c1b327531486c6f941c638c67cd22a7f75e2a37be0e82db8df9f30
254d30c1372581a1f51c983c80e4b71ccdd28dbf000000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f74
68656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f24
51eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198
720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528
a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100828abc13fa0000001c0200001300000000000000000000000000
000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b000000000000000000000000
002b0100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000140200007468
656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d001400060008000000210096b5ade296060000501b000016000000000000000000
00000000d10200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b010000270000000000
00000000000000009b0900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000960a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax267\lsdlockeddef0\lsdsemihiddendef1\lsdunhideuseddef1\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;
\lsdpriority39 \lsdlocked0 toc 1;\lsdpriority39 \lsdlocked0 toc 2;\lsdpriority39 \lsdlocked0 toc 3;\lsdpriority39 \lsdlocked0 toc 4;\lsdpriority39 \lsdlocked0 toc 5;\lsdpriority39 \lsdlocked0 toc 6;\lsdpriority39 \lsdlocked0 toc 7;
\lsdpriority39 \lsdlocked0 toc 8;\lsdpriority39 \lsdlocked0 toc 9;\lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdpriority1 \lsdlocked0 Default Paragraph Font;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority59 \lsdlocked0 Table Grid;\lsdunhideused0 \lsdlocked0 Placeholder Text;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdunhideused0 \lsdlocked0 Revision;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 2;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 5;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdsemihidden0 \lsdunhideused0 \lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority61 \lsdlocked0 Light List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority62 \lsdlocked0 Light Grid Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority70 \lsdlocked0 Dark List Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdsemihidden0 \lsdunhideused0 \lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;
\lsdsemihidden0 \lsdunhideused0 \lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdpriority37 \lsdlocked0 Bibliography;\lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e352e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffffec69d9888b8b3d4c859eaf6cd158be0f0000000000000000000000002083
35ac75dace01feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}